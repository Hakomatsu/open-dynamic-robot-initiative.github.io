<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="os__interface_8hpp" kind="file" language="C++">
    <compoundname>os_interface.hpp</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">net/if.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">sys/socket.h</includes>
    <includes local="no">sys/ioctl.h</includes>
    <includes local="no">linux/can.h</includes>
    <includes local="no">linux/can/raw.h</includes>
    <includes local="no">limits.h</includes>
    <includes local="no">real_time_tools/timer.hpp</includes>
    <includes local="no">iostream</includes>
    <includes local="no">sstream</includes>
    <includes local="no">mutex</includes>
    <includes local="no">condition_variable</includes>
    <includes local="no">sys/mman.h</includes>
    <includedby refid="can__bus_8hpp" local="yes">include/blmc_drivers/devices/can_bus.hpp</includedby>
    <includedby refid="motor__board_8hpp" local="yes">include/blmc_drivers/devices/motor_board.hpp</includedby>
    <incdepgraph>
      <node id="1060">
        <label>include/blmc_drivers/utils/os_interface.hpp</label>
        <link refid="os__interface_8hpp"/>
        <childnode refid="1061" relation="include">
        </childnode>
        <childnode refid="1062" relation="include">
        </childnode>
        <childnode refid="1063" relation="include">
        </childnode>
        <childnode refid="1064" relation="include">
        </childnode>
        <childnode refid="1065" relation="include">
        </childnode>
        <childnode refid="1066" relation="include">
        </childnode>
        <childnode refid="1067" relation="include">
        </childnode>
        <childnode refid="1068" relation="include">
        </childnode>
        <childnode refid="1069" relation="include">
        </childnode>
        <childnode refid="1070" relation="include">
        </childnode>
        <childnode refid="1071" relation="include">
        </childnode>
        <childnode refid="1072" relation="include">
        </childnode>
        <childnode refid="1073" relation="include">
        </childnode>
        <childnode refid="1074" relation="include">
        </childnode>
        <childnode refid="1075" relation="include">
        </childnode>
        <childnode refid="1076" relation="include">
        </childnode>
        <childnode refid="1077" relation="include">
        </childnode>
        <childnode refid="1078" relation="include">
        </childnode>
      </node>
      <node id="1066">
        <label>net/if.h</label>
      </node>
      <node id="1073">
        <label>real_time_tools/timer.hpp</label>
      </node>
      <node id="1064">
        <label>stdint.h</label>
      </node>
      <node id="1078">
        <label>sys/mman.h</label>
      </node>
      <node id="1062">
        <label>stdlib.h</label>
      </node>
      <node id="1071">
        <label>linux/can/raw.h</label>
      </node>
      <node id="1069">
        <label>sys/ioctl.h</label>
      </node>
      <node id="1070">
        <label>linux/can.h</label>
      </node>
      <node id="1072">
        <label>limits.h</label>
      </node>
      <node id="1077">
        <label>condition_variable</label>
      </node>
      <node id="1067">
        <label>sys/types.h</label>
      </node>
      <node id="1065">
        <label>string.h</label>
      </node>
      <node id="1063">
        <label>unistd.h</label>
      </node>
      <node id="1075">
        <label>sstream</label>
      </node>
      <node id="1074">
        <label>iostream</label>
      </node>
      <node id="1076">
        <label>mutex</label>
      </node>
      <node id="1068">
        <label>sys/socket.h</label>
      </node>
      <node id="1061">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1085">
        <label>demos/const_torque_control.hpp</label>
        <link refid="const__torque__control_8hpp"/>
        <childnode refid="1086" relation="include">
        </childnode>
        <childnode refid="1087" relation="include">
        </childnode>
      </node>
      <node id="1099">
        <label>demos/sine_torque_control.hpp</label>
        <link refid="sine__torque__control_8hpp"/>
        <childnode refid="1100" relation="include">
        </childnode>
        <childnode refid="1101" relation="include">
        </childnode>
      </node>
      <node id="1079">
        <label>include/blmc_drivers/utils/os_interface.hpp</label>
        <link refid="os__interface_8hpp"/>
        <childnode refid="1080" relation="include">
        </childnode>
        <childnode refid="1083" relation="include">
        </childnode>
      </node>
      <node id="1110">
        <label>src/motor_board.cpp</label>
        <link refid="motor__board_8cpp"/>
      </node>
      <node id="1090">
        <label>demos/demo_3_motors.cpp</label>
        <link refid="demo__3__motors_8cpp"/>
      </node>
      <node id="1093">
        <label>demos/demo_single_board.cpp</label>
        <link refid="demo__single__board_8cpp"/>
      </node>
      <node id="1082">
        <label>demos/demo_1_motor_print_everything.cpp</label>
        <link refid="demo__1__motor__print__everything_8cpp"/>
      </node>
      <node id="1107">
        <label>src/spi_motor_board.cpp</label>
        <link refid="spi__motor__board_8cpp"/>
      </node>
      <node id="1100">
        <label>demos/demo_sine_torque_1_motor.cpp</label>
        <link refid="demo__sine__torque__1__motor_8cpp"/>
      </node>
      <node id="1081">
        <label>demos/demo_1_motor.cpp</label>
        <link refid="demo__1__motor_8cpp"/>
      </node>
      <node id="1086">
        <label>demos/const_torque_control.cpp</label>
        <link refid="const__torque__control_8cpp"/>
      </node>
      <node id="1098">
        <label>demos/sine_position_control.cpp</label>
        <link refid="sine__position__control_8cpp"/>
      </node>
      <node id="1101">
        <label>demos/sine_torque_control.cpp</label>
        <link refid="sine__torque__control_8cpp"/>
      </node>
      <node id="1103">
        <label>include/blmc_drivers/devices/motor.hpp</label>
        <link refid="motor_8hpp"/>
        <childnode refid="1085" relation="include">
        </childnode>
        <childnode refid="1081" relation="include">
        </childnode>
        <childnode refid="1082" relation="include">
        </childnode>
        <childnode refid="1088" relation="include">
        </childnode>
        <childnode refid="1095" relation="include">
        </childnode>
        <childnode refid="1092" relation="include">
        </childnode>
        <childnode refid="1099" relation="include">
        </childnode>
        <childnode refid="1104" relation="include">
        </childnode>
        <childnode refid="1105" relation="include">
        </childnode>
        <childnode refid="1109" relation="include">
        </childnode>
        <childnode refid="1108" relation="include">
        </childnode>
      </node>
      <node id="1084">
        <label>include/blmc_drivers/devices/analog_sensor.hpp</label>
        <link refid="analog__sensor_8hpp"/>
        <childnode refid="1085" relation="include">
        </childnode>
        <childnode refid="1081" relation="include">
        </childnode>
        <childnode refid="1082" relation="include">
        </childnode>
        <childnode refid="1088" relation="include">
        </childnode>
        <childnode refid="1095" relation="include">
        </childnode>
        <childnode refid="1092" relation="include">
        </childnode>
        <childnode refid="1099" relation="include">
        </childnode>
        <childnode refid="1102" relation="include">
        </childnode>
      </node>
      <node id="1095">
        <label>demos/sine_position_control.hpp</label>
        <link refid="sine__position__control_8hpp"/>
        <childnode refid="1096" relation="include">
        </childnode>
        <childnode refid="1097" relation="include">
        </childnode>
        <childnode refid="1098" relation="include">
        </childnode>
      </node>
      <node id="1111">
        <label>src/can_bus.cpp</label>
        <link refid="can__bus_8cpp"/>
      </node>
      <node id="1104">
        <label>include/blmc_drivers/devices/leg.hpp</label>
        <link refid="leg_8hpp"/>
        <childnode refid="1092" relation="include">
        </childnode>
      </node>
      <node id="1092">
        <label>demos/demo_leg.cpp</label>
        <link refid="demo__leg_8cpp"/>
      </node>
      <node id="1097">
        <label>demos/demo_sine_position_1_motor.cpp</label>
        <link refid="demo__sine__position__1__motor_8cpp"/>
      </node>
      <node id="1108">
        <label>src/spi_bus.cpp</label>
        <link refid="spi__bus_8cpp"/>
      </node>
      <node id="1087">
        <label>demos/demo_const_torque_1_motor.cpp</label>
        <link refid="demo__const__torque__1__motor_8cpp"/>
      </node>
      <node id="1089">
        <label>demos/demo_2_motors.cpp</label>
        <link refid="demo__2__motors_8cpp"/>
      </node>
      <node id="1094">
        <label>demos/pd_control.cpp</label>
        <link refid="pd__control_8cpp"/>
      </node>
      <node id="1106">
        <label>include/blmc_drivers/devices/spi_motor_board.hpp</label>
        <link refid="spi__motor__board_8hpp"/>
        <childnode refid="1096" relation="include">
        </childnode>
        <childnode refid="1107" relation="include">
        </childnode>
      </node>
      <node id="1096">
        <label>demos/demo_ethernet.cpp</label>
        <link refid="demo__ethernet_8cpp"/>
      </node>
      <node id="1080">
        <label>include/blmc_drivers/devices/can_bus.hpp</label>
        <link refid="can__bus_8hpp"/>
        <childnode refid="1081" relation="include">
        </childnode>
        <childnode refid="1082" relation="include">
        </childnode>
        <childnode refid="1083" relation="include">
        </childnode>
        <childnode refid="1111" relation="include">
        </childnode>
      </node>
      <node id="1105">
        <label>include/blmc_drivers/devices/spi_bus.hpp</label>
        <link refid="spi__bus_8hpp"/>
        <childnode refid="1106" relation="include">
        </childnode>
        <childnode refid="1108" relation="include">
        </childnode>
      </node>
      <node id="1109">
        <label>src/motor.cpp</label>
        <link refid="motor_8cpp"/>
      </node>
      <node id="1083">
        <label>include/blmc_drivers/devices/motor_board.hpp</label>
        <link refid="motor__board_8hpp"/>
        <childnode refid="1081" relation="include">
        </childnode>
        <childnode refid="1082" relation="include">
        </childnode>
        <childnode refid="1084" relation="include">
        </childnode>
        <childnode refid="1103" relation="include">
        </childnode>
        <childnode refid="1105" relation="include">
        </childnode>
        <childnode refid="1106" relation="include">
        </childnode>
        <childnode refid="1110" relation="include">
        </childnode>
      </node>
      <node id="1091">
        <label>demos/demo_8_motors.cpp</label>
        <link refid="demo__8__motors_8cpp"/>
      </node>
      <node id="1102">
        <label>src/analog_sensors.cpp</label>
        <link refid="analog__sensors_8cpp"/>
      </node>
      <node id="1088">
        <label>demos/pd_control.hpp</label>
        <link refid="pd__control_8hpp"/>
        <childnode refid="1089" relation="include">
        </childnode>
        <childnode refid="1090" relation="include">
        </childnode>
        <childnode refid="1091" relation="include">
        </childnode>
        <childnode refid="1092" relation="include">
        </childnode>
        <childnode refid="1093" relation="include">
        </childnode>
        <childnode refid="1094" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespaceosi">osi</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="os__interface_8hpp_1a25df6b00e3fd8b8740896ecc5c337fdc" prot="public" static="no">
        <name>rt_fprintf</name>
        <initializer>fprintf</initializer>
        <briefdescription>
<para>Create a common type_def to wrap xenomai and posix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/blmc_drivers/utils/os_interface.hpp" line="72" column="9" bodyfile="include/blmc_drivers/utils/os_interface.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="os__interface_8hpp_1a1acf1ce04ab7fe3a5972c0618adcbbac" prot="public" static="no">
        <name>rt_printf</name>
        <initializer>printf</initializer>
        <briefdescription>
<para>Create a common type_def to wrap xenomai and posix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/blmc_drivers/utils/os_interface.hpp" line="76" column="9" bodyfile="include/blmc_drivers/utils/os_interface.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="os__interface_8hpp_1ac420926cbb955a79a41eba7cec1bc1c8" prot="public" static="no">
        <name>rt_dev_socket</name>
        <initializer>socket</initializer>
        <briefdescription>
<para>Create a common type_def to wrap xenomai and posix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/blmc_drivers/utils/os_interface.hpp" line="81" column="9" bodyfile="include/blmc_drivers/utils/os_interface.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="os__interface_8hpp_1a81e55d2bdf351cd53218a3085ba56955" prot="public" static="no">
        <name>rt_dev_ioctl</name>
        <initializer>ioctl</initializer>
        <briefdescription>
<para>Create a common type_def to wrap xenomai and posix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/blmc_drivers/utils/os_interface.hpp" line="85" column="9" bodyfile="include/blmc_drivers/utils/os_interface.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="os__interface_8hpp_1a7be59cefa5f5e5da067c04078f504aa6" prot="public" static="no">
        <name>rt_dev_close</name>
        <initializer>close</initializer>
        <briefdescription>
<para>Create a common type_def to wrap xenomai and posix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/blmc_drivers/utils/os_interface.hpp" line="89" column="9" bodyfile="include/blmc_drivers/utils/os_interface.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="os__interface_8hpp_1a80d28afb04b8db1e0192593ebcb4d07b" prot="public" static="no">
        <name>rt_dev_setsockopt</name>
        <initializer>setsockopt</initializer>
        <briefdescription>
<para>Create a common type_def to wrap xenomai and posix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/blmc_drivers/utils/os_interface.hpp" line="93" column="9" bodyfile="include/blmc_drivers/utils/os_interface.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="os__interface_8hpp_1a68219f584f63b92f4d23bd708140056d" prot="public" static="no">
        <name>rt_dev_bind</name>
        <initializer>bind</initializer>
        <briefdescription>
<para>Create a common type_def to wrap xenomai and posix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/blmc_drivers/utils/os_interface.hpp" line="97" column="9" bodyfile="include/blmc_drivers/utils/os_interface.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="os__interface_8hpp_1ab599460d70a4af2e3bcb07b395f13ad4" prot="public" static="no">
        <name>rt_dev_recvmsg</name>
        <initializer>recvmsg</initializer>
        <briefdescription>
<para>Create a common type_def to wrap xenomai and posix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/blmc_drivers/utils/os_interface.hpp" line="101" column="9" bodyfile="include/blmc_drivers/utils/os_interface.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="os__interface_8hpp_1ad9b081422ea995f98485f5545e20211d" prot="public" static="no">
        <name>rt_dev_sendto</name>
        <initializer>sendto</initializer>
        <briefdescription>
<para>Create a common type_def to wrap xenomai and posix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/blmc_drivers/utils/os_interface.hpp" line="105" column="9" bodyfile="include/blmc_drivers/utils/os_interface.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="os__interface_8hpp_1a8bc67ce447b2fa424a45f3e01162035f" prot="public" static="no">
        <type>struct can_frame</type>
        <definition>typedef struct can_frame can_frame_t</definition>
        <argsstring></argsstring>
        <name>can_frame_t</name>
        <briefdescription>
<para>xeno specific include </para>        </briefdescription>
        <detaileddescription>
<para>Define typedefs to make code compatible with Xenomai code. Create a common type_def to wrap xenomai and posix. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/blmc_drivers/utils/os_interface.hpp" line="103" column="1" bodyfile="include/blmc_drivers/utils/os_interface.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="os__interface_8hpp_1ab9491ad99890aa9ecf1785d1edd23d64" prot="public" static="no">
        <type>canid_t</type>
        <definition>typedef canid_t can_id_t</definition>
        <argsstring></argsstring>
        <name>can_id_t</name>
        <briefdescription>
<para>Create a common type_def to wrap xenomai and posix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/blmc_drivers/utils/os_interface.hpp" line="63" column="1" bodyfile="include/blmc_drivers/utils/os_interface.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="os__interface_8hpp_1ad3b24c25feabadba465f8797d8c7fe27" prot="public" static="no">
        <type>uint64_t</type>
        <definition>typedef uint64_t nanosecs_abs_t</definition>
        <argsstring></argsstring>
        <name>nanosecs_abs_t</name>
        <briefdescription>
<para>Create a common type_def to wrap xenomai and posix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/blmc_drivers/utils/os_interface.hpp" line="67" column="1" bodyfile="include/blmc_drivers/utils/os_interface.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Manuel Wuthrich (<ulink url="mailto:manuel.wuthrich@gmail.com">manuel.wuthrich@gmail.com</ulink>) </para></simplesect>
<simplesect kind="author"><para>Maximilien Naveau (<ulink url="mailto:maximilien.naveau@gmail.com">maximilien.naveau@gmail.com</ulink>) </para></simplesect>
<simplesect kind="version"><para>0.1 </para></simplesect>
<simplesect kind="date"><para>2018-11-27</para></simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2018 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="13"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor">#ifdef<sp/>__XENO__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;native/task.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;native/timer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;native/mutex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;native/cond.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;rtdk.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;rtdm/rtcan.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;net/if.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/socket.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/ioctl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;linux/can.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;linux/can/raw.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;real_time_tools/timer.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="os__interface_8hpp_1a8bc67ce447b2fa424a45f3e01162035f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_frame<sp/><ref refid="os__interface_8hpp_1a8bc67ce447b2fa424a45f3e01162035f" kindref="member">can_frame_t</ref>;</highlight></codeline>
<codeline lineno="63" refid="os__interface_8hpp_1ab9491ad99890aa9ecf1785d1edd23d64" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>canid_t<sp/><ref refid="os__interface_8hpp_1ab9491ad99890aa9ecf1785d1edd23d64" kindref="member">can_id_t</ref>;</highlight></codeline>
<codeline lineno="67" refid="os__interface_8hpp_1ad3b24c25feabadba465f8797d8c7fe27" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="os__interface_8hpp_1ad3b24c25feabadba465f8797d8c7fe27" kindref="member">nanosecs_abs_t</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="os__interface_8hpp_1a25df6b00e3fd8b8740896ecc5c337fdc" refkind="member"><highlight class="preprocessor">#define<sp/>rt_fprintf<sp/>fprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="os__interface_8hpp_1a1acf1ce04ab7fe3a5972c0618adcbbac" refkind="member"><highlight class="preprocessor">#define<sp/>rt_printf<sp/>printf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="os__interface_8hpp_1ac420926cbb955a79a41eba7cec1bc1c8" refkind="member"><highlight class="preprocessor">#define<sp/>rt_dev_socket<sp/>socket</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="os__interface_8hpp_1a81e55d2bdf351cd53218a3085ba56955" refkind="member"><highlight class="preprocessor">#define<sp/>rt_dev_ioctl<sp/>ioctl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="os__interface_8hpp_1a7be59cefa5f5e5da067c04078f504aa6" refkind="member"><highlight class="preprocessor">#define<sp/>rt_dev_close<sp/>close</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="os__interface_8hpp_1a80d28afb04b8db1e0192593ebcb4d07b" refkind="member"><highlight class="preprocessor">#define<sp/>rt_dev_setsockopt<sp/>setsockopt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="os__interface_8hpp_1a68219f584f63b92f4d23bd708140056d" refkind="member"><highlight class="preprocessor">#define<sp/>rt_dev_bind<sp/>bind</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="os__interface_8hpp_1ab599460d70a4af2e3bcb07b395f13ad4" refkind="member"><highlight class="preprocessor">#define<sp/>rt_dev_recvmsg<sp/>recvmsg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="os__interface_8hpp_1ad9b081422ea995f98485f5545e20211d" refkind="member"><highlight class="preprocessor">#define<sp/>rt_dev_sendto<sp/>sendto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;condition_variable&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/mman.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="namespaceosi" refkind="compound"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceosi" kindref="compound">osi</ref></highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__XENO__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">xenomai</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="keyword">class<sp/></highlight><highlight class="normal">mutex</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>RT_MUTEX<sp/>rt_mutex_;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex()</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rt_mutex_create(&amp;rt_mutex_,<sp/>NULL);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lock()</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rt_mutex_acquire(&amp;rt_mutex_,<sp/>TM_INFINITE);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unlock()</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rt_mutex_release(&amp;rt_mutex_);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal">};</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="keyword">class<sp/></highlight><highlight class="normal">condition_variable</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>RT_COND<sp/>rt_condition_variable_;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>condition_variable()</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rt_cond_create(&amp;rt_condition_variable_,<sp/>NULL);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>wait(std::unique_lock&lt;mutex&gt;<sp/>&amp;lock)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rt_cond_wait(&amp;rt_condition_variable_,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;lock.mutex()-&gt;rt_mutex_,<sp/>TM_INFINITE);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>notify_all()</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rt_cond_broadcast(&amp;rt_condition_variable_);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal">};</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>xenomai</highlight></codeline>
<codeline lineno="212"><highlight class="comment"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>xenomai::mutex<sp/><ref refid="namespaceosi_1ac3d484da0f89f06e329d4b84d7459d9b" kindref="member">Mutex</ref>;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>xenomai::condition_variable<sp/><ref refid="namespaceosi_1a31b1ce104b168554e4832b5d3b684073" kindref="member">ConditionVariable</ref>;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="namespaceosi_1ac3d484da0f89f06e329d4b84d7459d9b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::mutex<sp/><ref refid="namespaceosi_1ac3d484da0f89f06e329d4b84d7459d9b" kindref="member">Mutex</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="namespaceosi_1a31b1ce104b168554e4832b5d3b684073" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::condition_variable<sp/><ref refid="namespaceosi_1a31b1ce104b168554e4832b5d3b684073" kindref="member">ConditionVariable</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="243" refid="namespaceosi_1a001686caee0f34611f14ab94c7303254" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceosi_1a001686caee0f34611f14ab94c7303254" kindref="member">send_to_can_device</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr<sp/>*to,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>socklen_t<sp/>tolen)</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>int<sp/>ret<sp/>=<sp/>rt_dev_sendto(fd,<sp/>buf,<sp/>len,<sp/>flags,<sp/>to,<sp/>tolen);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(ret<sp/>&lt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/>&quot;something<sp/>went<sp/>wrong<sp/>with<sp/>sending<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;CAN<sp/>frame,<sp/>error<sp/>code:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ret<sp/>&lt;&lt;<sp/>&quot;,<sp/>errno=&quot;<sp/>&lt;&lt;<sp/>errno<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(oss.str());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>i++)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="os__interface_8hpp_1ad9b081422ea995f98485f5545e20211d" kindref="member">rt_dev_sendto</ref>(fd,<sp/>buf,<sp/>len,<sp/>flags,<sp/>to,<sp/>tolen);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Managed<sp/>to<sp/>send<sp/>after<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>attempts.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;WARNING:<sp/>Something<sp/>went<sp/>wrong<sp/>with<sp/>sending<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;CAN<sp/>frame,<sp/>error<sp/>code:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ret<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>errno:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>errno<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.<sp/>Possibly<sp/>you<sp/>have<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;been<sp/>attempting<sp/>to<sp/>send<sp/>at<sp/>a<sp/>rate<sp/>which<sp/>is<sp/>too<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;high.<sp/>We<sp/>keep<sp/>trying&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::flush;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceosi_1a499cdf6336a907d1327044b0f595f3a9" kindref="member">real_time_tools::Timer::sleep_ms</ref>(0.1);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="namespaceosi_1a92dc20de3b4933a10f24c98cecf2568b" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceosi_1a92dc20de3b4933a10f24c98cecf2568b" kindref="member">close_can_device</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>socket)</highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="os__interface_8hpp_1a7be59cefa5f5e5da067c04078f504aa6" kindref="member">rt_dev_close</ref>(socket);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="os__interface_8hpp_1a25df6b00e3fd8b8740896ecc5c337fdc" kindref="member">rt_fprintf</ref>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;rt_dev_close:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>strerror(-ret));</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="namespaceosi_1a244466c0afc9ae9fe059cee665fb0603" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceosi_1a244466c0afc9ae9fe059cee665fb0603" kindref="member">receive_message_from_can_device</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>msghdr<sp/>*msg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="os__interface_8hpp_1ab599460d70a4af2e3bcb07b395f13ad4" kindref="member">rt_dev_recvmsg</ref>(fd,<sp/>msg,<sp/>flags);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;something<sp/>went<sp/>wrong<sp/>with<sp/>receiving<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;CAN<sp/>frame,<sp/>error<sp/>code:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ret<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>errno=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>errno<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(oss.str());</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="325" refid="namespaceosi_1a48e36c862c77befc86f53140722c3f43" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceosi_1a48e36c862c77befc86f53140722c3f43" kindref="member">initialize_realtime_printing</ref>()</highlight></codeline>
<codeline lineno="326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__XENO__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>rt_print_auto_init(1);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="namespaceosi_1a499cdf6336a907d1327044b0f595f3a9" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceosi_1a499cdf6336a907d1327044b0f595f3a9" kindref="member">sleep_ms</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;sleep_time_ms)</highlight></codeline>
<codeline lineno="338"><highlight class="normal">{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__XENO__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>rt_task_sleep(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(sleep_time_ms<sp/>*<sp/>1000000.));</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>usleep(sleep_time_ms<sp/>*<sp/>1000.);<sp/></highlight><highlight class="comment">//<sp/>nano_sleep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="namespaceosi_1a2409ab591c4f78d9a8bcfbbe38df9429" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespaceosi_1a2409ab591c4f78d9a8bcfbbe38df9429" kindref="member">get_current_time_ms</ref>()</highlight></codeline>
<codeline lineno="353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__XENO__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>double(rt_timer_read())<sp/>/<sp/>1000000.;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>now;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>clock_gettime(CLOCK_REALTIME,<sp/>&amp;now);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_time_ms<sp/>=<sp/>(double)(now.tv_sec<sp/>*<sp/>1e3)<sp/>+<sp/>(now.tv_nsec<sp/>/<sp/>1e6);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current_time_ms;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="namespaceosi_1af6772d4aea95e99bc2bd0aabc557a20e" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceosi_1af6772d4aea95e99bc2bd0aabc557a20e" kindref="member">make_this_thread_realtime</ref>()</highlight></codeline>
<codeline lineno="369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__XENO__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>rt_task_shadow(NULL,<sp/>NULL,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>osi</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/blmc_drivers/utils/os_interface.hpp"/>
  </compounddef>
</doxygen>
