<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="demo__3__motors_8cpp" kind="file" language="C++">
    <compoundname>demo_3_motors.cpp</compoundname>
    <includes local="no">atomic</includes>
    <includes local="no">signal.h</includes>
    <includes refid="pd__control_8hpp" local="yes">pd_control.hpp</includes>
    <incdepgraph>
      <node id="186">
        <label>blmc_drivers/utils/os_interface.hpp</label>
        <link refid="os__interface_8hpp"/>
        <childnode refid="187" relation="include">
        </childnode>
        <childnode refid="188" relation="include">
        </childnode>
        <childnode refid="189" relation="include">
        </childnode>
        <childnode refid="190" relation="include">
        </childnode>
        <childnode refid="191" relation="include">
        </childnode>
        <childnode refid="192" relation="include">
        </childnode>
        <childnode refid="193" relation="include">
        </childnode>
        <childnode refid="194" relation="include">
        </childnode>
        <childnode refid="195" relation="include">
        </childnode>
        <childnode refid="196" relation="include">
        </childnode>
        <childnode refid="197" relation="include">
        </childnode>
        <childnode refid="198" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="199" relation="include">
        </childnode>
        <childnode refid="200" relation="include">
        </childnode>
        <childnode refid="201" relation="include">
        </childnode>
        <childnode refid="202" relation="include">
        </childnode>
        <childnode refid="203" relation="include">
        </childnode>
      </node>
      <node id="175">
        <label>atomic</label>
      </node>
      <node id="192">
        <label>net/if.h</label>
      </node>
      <node id="174">
        <label>demos/demo_3_motors.cpp</label>
        <link refid="demo__3__motors_8cpp"/>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="176" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
      </node>
      <node id="181">
        <label>real_time_tools/timer.hpp</label>
      </node>
      <node id="190">
        <label>stdint.h</label>
      </node>
      <node id="203">
        <label>sys/mman.h</label>
      </node>
      <node id="188">
        <label>stdlib.h</label>
      </node>
      <node id="183">
        <label>real_time_tools/threadsafe/threadsafe_timeseries.hpp</label>
      </node>
      <node id="185">
        <label>real_time_tools/thread.hpp</label>
      </node>
      <node id="180">
        <label>string</label>
      </node>
      <node id="197">
        <label>linux/can/raw.h</label>
      </node>
      <node id="195">
        <label>sys/ioctl.h</label>
      </node>
      <node id="178">
        <label>blmc_drivers/devices/motor.hpp</label>
        <link refid="motor_8hpp"/>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
        <childnode refid="183" relation="include">
        </childnode>
        <childnode refid="184" relation="include">
        </childnode>
        <childnode refid="207" relation="include">
        </childnode>
      </node>
      <node id="196">
        <label>linux/can.h</label>
      </node>
      <node id="182">
        <label>real_time_tools/threadsafe/threadsafe_object.hpp</label>
      </node>
      <node id="198">
        <label>limits.h</label>
      </node>
      <node id="206">
        <label>real_time_tools/spinner.hpp</label>
      </node>
      <node id="208">
        <label>blmc_drivers/devices/analog_sensor.hpp</label>
        <link refid="analog__sensor_8hpp"/>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="183" relation="include">
        </childnode>
        <childnode refid="207" relation="include">
        </childnode>
        <childnode refid="184" relation="include">
        </childnode>
      </node>
      <node id="205">
        <label>real_time_tools/iostream.hpp</label>
      </node>
      <node id="202">
        <label>condition_variable</label>
      </node>
      <node id="193">
        <label>sys/types.h</label>
      </node>
      <node id="191">
        <label>string.h</label>
      </node>
      <node id="189">
        <label>unistd.h</label>
      </node>
      <node id="176">
        <label>signal.h</label>
      </node>
      <node id="200">
        <label>sstream</label>
      </node>
      <node id="199">
        <label>iostream</label>
      </node>
      <node id="204">
        <label>blmc_drivers/devices/can_bus.hpp</label>
        <link refid="can__bus_8hpp"/>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="185" relation="include">
        </childnode>
        <childnode refid="205" relation="include">
        </childnode>
        <childnode refid="206" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
        <childnode refid="183" relation="include">
        </childnode>
        <childnode refid="186" relation="include">
        </childnode>
        <childnode refid="207" relation="include">
        </childnode>
      </node>
      <node id="201">
        <label>mutex</label>
      </node>
      <node id="194">
        <label>sys/socket.h</label>
      </node>
      <node id="207">
        <label>blmc_drivers/devices/device_interface.hpp</label>
        <link refid="device__interface_8hpp"/>
      </node>
      <node id="184">
        <label>blmc_drivers/devices/motor_board.hpp</label>
        <link refid="motor__board_8hpp"/>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="185" relation="include">
        </childnode>
        <childnode refid="186" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
        <childnode refid="183" relation="include">
        </childnode>
        <childnode refid="204" relation="include">
        </childnode>
        <childnode refid="207" relation="include">
        </childnode>
      </node>
      <node id="187">
        <label>stdio.h</label>
      </node>
      <node id="177">
        <label>pd_control.hpp</label>
        <link refid="pd__control_8hpp"/>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
      </node>
      <node id="179">
        <label>memory</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="demo__3__motors_8cpp_1a75d8b98fafbd2fb243e91c6164b114ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::atomic_bool</type>
        <definition>std::atomic_bool StopDemos</definition>
        <argsstring>(false)</argsstring>
        <name>StopDemos</name>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
<para>This boolean is here to kill cleanly the application upon ctrl+c. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_3_motors.cpp" line="14" column="1"/>
      </memberdef>
      <memberdef kind="function" id="demo__3__motors_8cpp_1a13848d945610347db87a059fe0b43f35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void my_handler</definition>
        <argsstring>(int s)</argsstring>
        <name>my_handler</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>This function is the callback upon a ctrl+c call from the terminal. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_3_motors.cpp" line="21" column="1" bodyfile="demos/demo_3_motors.cpp" bodystart="21" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="demo__3__motors_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>This is the main demo program. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_3_motors.cpp" line="32" column="1" bodyfile="demos/demo_3_motors.cpp" bodystart="32" bodyend="95"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>Copyright (c) 2018-2020, New York University and Max Planck Gesellschaft, License BSD-3-Clause </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pd__control_8hpp" kindref="compound">pd_control.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">std::atomic_bool<sp/><ref refid="demo__3__motors_8cpp_1a75d8b98fafbd2fb243e91c6164b114ce" kindref="member">StopDemos</ref><sp/>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="demo__3__motors_8cpp_1a13848d945610347db87a059fe0b43f35" kindref="member">my_handler</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s){</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><ref refid="demo__3__motors_8cpp_1a75d8b98fafbd2fb243e91c6164b114ce" kindref="member">StopDemos</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="demo__3__motors_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>we<sp/>catch<sp/>the<sp/>ctrl+c<sp/>signal<sp/>to<sp/>kill<sp/>the<sp/>application<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>sigIntHandler;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>sigIntHandler.sa_handler<sp/>=<sp/><ref refid="demo__3__motors_8cpp_1a13848d945610347db87a059fe0b43f35" kindref="member">my_handler</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>sigemptyset(&amp;sigIntHandler.sa_mask);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>sigIntHandler.sa_flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>sigaction(SIGINT,<sp/>&amp;sigIntHandler,<sp/>NULL);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="demo__3__motors_8cpp_1a75d8b98fafbd2fb243e91c6164b114ce" kindref="member">StopDemos</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>of<sp/>all<sp/>one<sp/>need<sp/>to<sp/>initialize<sp/>the<sp/>communication<sp/>with<sp/>the<sp/>can<sp/>bus.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>can_bus1<sp/>=<sp/>std::make_shared&lt;blmc_drivers::CanBus&gt;(</highlight><highlight class="stringliteral">&quot;can0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>can_bus2<sp/>=<sp/>std::make_shared&lt;blmc_drivers::CanBus&gt;(</highlight><highlight class="stringliteral">&quot;can1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>we<sp/>create<sp/>a<sp/>motor<sp/>board<sp/>object<sp/>that<sp/>will<sp/>use<sp/>the<sp/>can<sp/>bus<sp/>in<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>communicate<sp/>between<sp/>this<sp/>application<sp/>and<sp/>the<sp/>actual<sp/>motor<sp/>board.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Important:<sp/>the<sp/>blmc<sp/>motors<sp/>are<sp/>alinged<sp/>during<sp/>this<sp/>stage.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>board1<sp/>=<sp/>std::make_shared&lt;blmc_drivers::CanBusMotorBoard&gt;(can_bus1);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>board2<sp/>=<sp/>std::make_shared&lt;blmc_drivers::CanBusMotorBoard&gt;(can_bus2);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>motors<sp/>object<sp/>that<sp/>have<sp/>an<sp/>index<sp/>that<sp/>define<sp/>the<sp/>port<sp/>on<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>they<sp/>are<sp/>plugged<sp/>on<sp/>the<sp/>motor<sp/>board.<sp/>This<sp/>object<sp/>takes<sp/>also<sp/>a<sp/>MotorBoard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>object<sp/>to<sp/>be<sp/>able<sp/>to<sp/>get<sp/>the<sp/>sensors<sp/>and<sp/>send<sp/>the<sp/>control<sp/>consistantly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>safe<sp/>motors<sp/>have<sp/>the<sp/>ability<sp/>to<sp/>bound<sp/>the<sp/>current<sp/>that<sp/>is<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>motor_1<sp/>=<sp/>std::make_shared&lt;blmc_drivers::SafeMotor&gt;(board1,<sp/>0);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>motor_2<sp/>=<sp/>std::make_shared&lt;blmc_drivers::SafeMotor&gt;(board1,<sp/>1);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>motor_3<sp/>=<sp/>std::make_shared&lt;blmc_drivers::SafeMotor&gt;(board2,<sp/>0);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os__interface_8hpp_1a1acf1ce04ab7fe3a5972c0618adcbbac" kindref="member">rt_printf</ref>(</highlight><highlight class="stringliteral">&quot;motors<sp/>are<sp/>set<sp/>up<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>2<sp/>analogue<sp/>sensors<sp/>onject<sp/>which<sp/>happen<sp/>to<sp/>be<sp/>slider<sp/>here,<sp/>i.e.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>linear<sp/>potentiometers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>slider_1<sp/>=<sp/>std::make_shared&lt;blmc_drivers::AnalogSensor&gt;(board1,<sp/>0);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>slider_2<sp/>=<sp/>std::make_shared&lt;blmc_drivers::AnalogSensor&gt;(board1,<sp/>1);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>slider_3<sp/>=<sp/>std::make_shared&lt;blmc_drivers::AnalogSensor&gt;(board2,<sp/>0);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os__interface_8hpp_1a1acf1ce04ab7fe3a5972c0618adcbbac" kindref="member">rt_printf</ref>(</highlight><highlight class="stringliteral">&quot;sensors<sp/>are<sp/>set<sp/>up<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>the<sp/>pairs<sp/>of<sp/>motors<sp/>and<sp/>sliders</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;blmc_drivers::PairMotorSlider&gt;<sp/>motor_and_sliders;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>motor_and_sliders.push_back(</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceblmc__drivers_1a134270c90d29a9a28b64ab0e5f7158f7" kindref="member">blmc_drivers::PairMotorSlider</ref>(motor_1,<sp/>slider_1));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>motor_and_sliders.push_back(</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceblmc__drivers_1a134270c90d29a9a28b64ab0e5f7158f7" kindref="member">blmc_drivers::PairMotorSlider</ref>(motor_2,<sp/>slider_2));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>motor_and_sliders.push_back(</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceblmc__drivers_1a134270c90d29a9a28b64ab0e5f7158f7" kindref="member">blmc_drivers::PairMotorSlider</ref>(motor_3,<sp/>slider_3));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>a<sp/>simple<sp/>PD<sp/>controller.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classblmc__drivers_1_1PDController" kindref="compound">blmc_drivers::PDController</ref><sp/>controller(motor_and_sliders);<sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os__interface_8hpp_1a1acf1ce04ab7fe3a5972c0618adcbbac" kindref="member">rt_printf</ref>(</highlight><highlight class="stringliteral">&quot;controllers<sp/>are<sp/>set<sp/>up<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>controller.start_loop();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os__interface_8hpp_1a1acf1ce04ab7fe3a5972c0618adcbbac" kindref="member">rt_printf</ref>(</highlight><highlight class="stringliteral">&quot;loops<sp/>have<sp/>started<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>until<sp/>the<sp/>application<sp/>is<sp/>killed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!<ref refid="demo__3__motors_8cpp_1a75d8b98fafbd2fb243e91c6164b114ce" kindref="member">StopDemos</ref>)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_time_tools::Timer::sleep_sec(0.01);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="demos/demo_3_motors.cpp"/>
  </compounddef>
</doxygen>
