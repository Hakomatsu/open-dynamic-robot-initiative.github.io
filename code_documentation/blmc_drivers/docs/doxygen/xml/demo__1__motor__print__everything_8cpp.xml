<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="demo__1__motor__print__everything_8cpp" kind="file" language="C++">
    <compoundname>demo_1_motor_print_everything.cpp</compoundname>
    <includes local="no">tuple</includes>
    <includes refid="can__bus_8hpp" local="yes">blmc_drivers/devices/can_bus.hpp</includes>
    <includes refid="motor__board_8hpp" local="yes">blmc_drivers/devices/motor_board.hpp</includes>
    <includes refid="motor_8hpp" local="yes">blmc_drivers/devices/motor.hpp</includes>
    <includes refid="analog__sensor_8hpp" local="yes">blmc_drivers/devices/analog_sensor.hpp</includes>
    <incdepgraph>
      <node id="115">
        <label>blmc_drivers/utils/os_interface.hpp</label>
        <link refid="os__interface_8hpp"/>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
      </node>
      <node id="121">
        <label>net/if.h</label>
      </node>
      <node id="109">
        <label>real_time_tools/timer.hpp</label>
      </node>
      <node id="119">
        <label>stdint.h</label>
      </node>
      <node id="132">
        <label>sys/mman.h</label>
      </node>
      <node id="117">
        <label>stdlib.h</label>
      </node>
      <node id="104">
        <label>demos/demo_1_motor_print_everything.cpp</label>
        <link refid="demo__1__motor__print__everything_8cpp"/>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
      </node>
      <node id="114">
        <label>real_time_tools/threadsafe/threadsafe_timeseries.hpp</label>
      </node>
      <node id="110">
        <label>real_time_tools/thread.hpp</label>
      </node>
      <node id="108">
        <label>string</label>
      </node>
      <node id="126">
        <label>linux/can/raw.h</label>
      </node>
      <node id="124">
        <label>sys/ioctl.h</label>
      </node>
      <node id="135">
        <label>blmc_drivers/devices/motor.hpp</label>
        <link refid="motor_8hpp"/>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
      </node>
      <node id="125">
        <label>linux/can.h</label>
      </node>
      <node id="113">
        <label>real_time_tools/threadsafe/threadsafe_object.hpp</label>
      </node>
      <node id="127">
        <label>limits.h</label>
      </node>
      <node id="112">
        <label>real_time_tools/spinner.hpp</label>
      </node>
      <node id="136">
        <label>blmc_drivers/devices/analog_sensor.hpp</label>
        <link refid="analog__sensor_8hpp"/>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
      </node>
      <node id="111">
        <label>real_time_tools/iostream.hpp</label>
      </node>
      <node id="131">
        <label>condition_variable</label>
      </node>
      <node id="122">
        <label>sys/types.h</label>
      </node>
      <node id="120">
        <label>string.h</label>
      </node>
      <node id="105">
        <label>tuple</label>
      </node>
      <node id="118">
        <label>unistd.h</label>
      </node>
      <node id="129">
        <label>sstream</label>
      </node>
      <node id="128">
        <label>iostream</label>
      </node>
      <node id="106">
        <label>blmc_drivers/devices/can_bus.hpp</label>
        <link refid="can__bus_8hpp"/>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
      </node>
      <node id="130">
        <label>mutex</label>
      </node>
      <node id="123">
        <label>sys/socket.h</label>
      </node>
      <node id="133">
        <label>blmc_drivers/devices/device_interface.hpp</label>
        <link refid="device__interface_8hpp"/>
      </node>
      <node id="134">
        <label>blmc_drivers/devices/motor_board.hpp</label>
        <link refid="motor__board_8hpp"/>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
      </node>
      <node id="116">
        <label>stdio.h</label>
      </node>
      <node id="107">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="structHardware" prot="public">Hardware</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="demo__1__motor__print__everything_8cpp_1a79c0c6b6c32644638c116c33ac488cd1" prot="public" static="no">
        <type>std::tuple&lt; std::shared_ptr&lt; <ref refid="classblmc__drivers_1_1MotorInterface" kindref="compound">blmc_drivers::MotorInterface</ref> &gt;, std::shared_ptr&lt; <ref refid="classblmc__drivers_1_1AnalogSensorInterface" kindref="compound">blmc_drivers::AnalogSensorInterface</ref> &gt; &gt;</type>
        <definition>typedef std::tuple&lt;std::shared_ptr&lt;blmc_drivers::MotorInterface&gt;,std::shared_ptr&lt;blmc_drivers::AnalogSensorInterface&gt; &gt; MotorAndSlider</definition>
        <argsstring></argsstring>
        <name>MotorAndSlider</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_1_motor_print_everything.cpp" line="15" column="1" bodyfile="demos/demo_1_motor_print_everything.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="demo__1__motor__print__everything_8cpp_1a07b2980e601e477f63efb8dd69746cf6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>THREAD_FUNCTION_RETURN_TYPE</type>
        <definition>static THREAD_FUNCTION_RETURN_TYPE control_loop</definition>
        <argsstring>(void *hardware_ptr)</argsstring>
        <name>control_loop</name>
        <param>
          <type>void *</type>
          <declname>hardware_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_1_motor_print_everything.cpp" line="28" column="1" bodyfile="demos/demo_1_motor_print_everything.cpp" bodystart="28" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="demo__1__motor__print__everything_8cpp_1ad18685f4cbdcd5b0f6f98059487b1203" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>THREAD_FUNCTION_RETURN_TYPE</type>
        <definition>static THREAD_FUNCTION_RETURN_TYPE printing_loop</definition>
        <argsstring>(void *hardware_ptr)</argsstring>
        <name>printing_loop</name>
        <param>
          <type>void *</type>
          <declname>hardware_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_1_motor_print_everything.cpp" line="56" column="1" bodyfile="demos/demo_1_motor_print_everything.cpp" bodystart="56" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="demo__1__motor__print__everything_8cpp_1a2c3f6775325c30275d11c6abee2db6a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int, char **)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>char **</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_1_motor_print_everything.cpp" line="84" column="1" bodyfile="demos/demo_1_motor_print_everything.cpp" bodystart="84" bodyend="121"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>Copyright (c) 2018-2020, New York University and Max Planck Gesellschaft, License BSD-3-Clause </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="can__bus_8hpp" kindref="compound">blmc_drivers/devices/can_bus.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="motor__board_8hpp" kindref="compound">blmc_drivers/devices/motor_board.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="motor_8hpp" kindref="compound">blmc_drivers/devices/motor.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="analog__sensor_8hpp" kindref="compound">blmc_drivers/devices/analog_sensor.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::tuple&lt;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">std::shared_ptr&lt;blmc_drivers::MotorInterface&gt;,</highlight></codeline>
<codeline lineno="15"><highlight class="normal">std::shared_ptr&lt;blmc_drivers::AnalogSensorInterface&gt;&gt;<sp/>MotorAndSlider;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structHardware" kindref="compound">Hardware</ref></highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;blmc_drivers::CanBusInterface&gt;<sp/>can_bus;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;blmc_drivers::MotorBoardInterface&gt;<sp/>motor_board;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;blmc_drivers::MotorInterface&gt;<sp/>motor;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;blmc_drivers::AnalogSensorInterface&gt;<sp/>slider;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>THREAD_FUNCTION_RETURN_TYPE<sp/>control_loop(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>hardware_ptr)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cast<sp/>input<sp/>arguments<sp/>to<sp/>the<sp/>right<sp/>format<sp/>--------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structHardware" kindref="compound">Hardware</ref>&amp;<sp/>hardware<sp/>=</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structHardware" kindref="compound">Hardware</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(hardware_ptr));</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>torque<sp/>controller<sp/>-------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>real_time_tools::Spinner<sp/>spinner;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>spinner.set_period(0.001);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>sliders<sp/>are<sp/>giving<sp/>values<sp/>between<sp/>0.0<sp/>and<sp/>1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>slider_position<sp/>=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hardware.slider-&gt;get_measurement()-&gt;newest_element();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>transform<sp/>it<sp/>into<sp/>a<sp/>current<sp/>between<sp/>-2.0<sp/>and<sp/>2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>desired_current<sp/>=<sp/>(slider_position<sp/>-<sp/>0.5)<sp/>*<sp/>4.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>send<sp/>the<sp/>current<sp/>to<sp/>the<sp/>motor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hardware.motor-&gt;set_current_target(</highlight><highlight class="comment">/*desired_current*/</highlight><highlight class="normal">0.0);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hardware.motor-&gt;send_if_input_changed();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spinner.spin();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>THREAD_FUNCTION_RETURN_TYPE<sp/>printing_loop(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>hardware_ptr)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cast<sp/>input<sp/>arguments<sp/>to<sp/>the<sp/>right<sp/>format<sp/>--------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structHardware" kindref="compound">Hardware</ref>&amp;<sp/>hardware<sp/>=</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structHardware" kindref="compound">Hardware</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(hardware_ptr));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>info<sp/>--------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeindex<sp/>=<sp/>hardware.can_bus-&gt;get_output_frame()-&gt;newest_timeindex();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>received_timeindex<sp/>=<sp/>timeindex;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>return<sp/>the<sp/>element<sp/>with<sp/>the<sp/>index<sp/>received_timeindex,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>element<sp/>does<sp/>not<sp/>exist<sp/>anymore,<sp/>it<sp/>will<sp/>return<sp/>the<sp/>oldest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>element<sp/>it<sp/>still<sp/>has<sp/>and<sp/>change<sp/>received_timeindex<sp/>to<sp/>the<sp/>appropriate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classblmc__drivers_1_1CanBusFrame" kindref="compound">blmc_drivers::CanBusFrame</ref><sp/>can_frame<sp/>=</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*hardware.can_bus-&gt;get_output_frame())[received_timeindex];</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeindex++;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="os__interface_8hpp_1a1acf1ce04ab7fe3a5972c0618adcbbac" kindref="member">rt_printf</ref>(</highlight><highlight class="stringliteral">&quot;timeindex:<sp/>%ld\n&quot;</highlight><highlight class="normal">,<sp/>timeindex);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_frame.print();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>THREAD_FUNCTION_RETURN_VALUE;</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structHardware" kindref="compound">Hardware</ref><sp/>hardware;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>of<sp/>all<sp/>one<sp/>need<sp/>to<sp/>initialize<sp/>the<sp/>communication<sp/>with<sp/>the<sp/>can<sp/>bus.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>hardware.can_bus<sp/>=<sp/>std::make_shared&lt;blmc_drivers::CanBus&gt;(</highlight><highlight class="stringliteral">&quot;can0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>we<sp/>create<sp/>a<sp/>motor<sp/>board<sp/>object<sp/>that<sp/>will<sp/>use<sp/>the<sp/>can<sp/>bus<sp/>in<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>communicate<sp/>between<sp/>this<sp/>application<sp/>and<sp/>the<sp/>actual<sp/>motor<sp/>board.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Important:<sp/>the<sp/>blmc<sp/>motors<sp/>are<sp/>alinged<sp/>during<sp/>this<sp/>stage.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>hardware.motor_board<sp/>=</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;blmc_drivers::CanBusMotorBoard&gt;(hardware.can_bus);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>motor<sp/>object<sp/>that<sp/>have<sp/>an<sp/>index<sp/>that<sp/>define<sp/>the<sp/>port<sp/>on<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>they<sp/>are<sp/>plugged<sp/>on<sp/>the<sp/>motor<sp/>board.<sp/>This<sp/>object<sp/>takes<sp/>also<sp/>a<sp/>MotorBoard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>object<sp/>to<sp/>be<sp/>able<sp/>to<sp/>get<sp/>the<sp/>sensors<sp/>and<sp/>send<sp/>the<sp/>control<sp/>consistantly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>safe<sp/>motors<sp/>have<sp/>the<sp/>ability<sp/>to<sp/>bound<sp/>the<sp/>current<sp/>that<sp/>is<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>hardware.motor<sp/>=</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;blmc_drivers::SafeMotor&gt;(hardware.motor_board,<sp/>0);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>analogue<sp/>sensors<sp/>object<sp/>which<sp/>happens<sp/>to<sp/>be<sp/>slider<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>hardware.slider<sp/>=</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;blmc_drivers::AnalogSensor&gt;(hardware.motor_board,<sp/>0);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>real-time<sp/>control<sp/>loop<sp/>--------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>real_time_tools::RealTimeThread<sp/>control_thread;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>control_thread.create_realtime_thread(&amp;control_loop,<sp/>&amp;hardware);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>real-time<sp/>printing<sp/>loop<sp/>-------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>real_time_tools::RealTimeThread<sp/>printing_thread;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>printing_thread.create_realtime_thread(&amp;printing_loop,<sp/>&amp;hardware);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os__interface_8hpp_1a1acf1ce04ab7fe3a5972c0618adcbbac" kindref="member">rt_printf</ref>(</highlight><highlight class="stringliteral">&quot;control<sp/>loop<sp/>started<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>control_thread.join();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>printing_thread.join();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="demos/demo_1_motor_print_everything.cpp"/>
  </compounddef>
</doxygen>
