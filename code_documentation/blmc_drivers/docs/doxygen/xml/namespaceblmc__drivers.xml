<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceblmc__drivers" kind="namespace" language="C++">
    <compoundname>blmc_drivers</compoundname>
    <innerclass refid="classblmc__drivers_1_1AnalogSensor" prot="public">blmc_drivers::AnalogSensor</innerclass>
    <innerclass refid="classblmc__drivers_1_1AnalogSensorInterface" prot="public">blmc_drivers::AnalogSensorInterface</innerclass>
    <innerclass refid="classblmc__drivers_1_1CanBus" prot="public">blmc_drivers::CanBus</innerclass>
    <innerclass refid="classblmc__drivers_1_1CanBusConnection" prot="public">blmc_drivers::CanBusConnection</innerclass>
    <innerclass refid="classblmc__drivers_1_1CanBusFrame" prot="public">blmc_drivers::CanBusFrame</innerclass>
    <innerclass refid="classblmc__drivers_1_1CanBusInterface" prot="public">blmc_drivers::CanBusInterface</innerclass>
    <innerclass refid="classblmc__drivers_1_1CanBusMotorBoard" prot="public">blmc_drivers::CanBusMotorBoard</innerclass>
    <innerclass refid="classblmc__drivers_1_1ConstTorqueControl" prot="public">blmc_drivers::ConstTorqueControl</innerclass>
    <innerclass refid="classblmc__drivers_1_1DeviceInterface" prot="public">blmc_drivers::DeviceInterface</innerclass>
    <innerclass refid="classblmc__drivers_1_1Leg" prot="public">blmc_drivers::Leg</innerclass>
    <innerclass refid="classblmc__drivers_1_1LegInterface" prot="public">blmc_drivers::LegInterface</innerclass>
    <innerclass refid="classblmc__drivers_1_1Motor" prot="public">blmc_drivers::Motor</innerclass>
    <innerclass refid="classblmc__drivers_1_1MotorBoardCommand" prot="public">blmc_drivers::MotorBoardCommand</innerclass>
    <innerclass refid="classblmc__drivers_1_1MotorBoardInterface" prot="public">blmc_drivers::MotorBoardInterface</innerclass>
    <innerclass refid="classblmc__drivers_1_1MotorBoardStatus" prot="public">blmc_drivers::MotorBoardStatus</innerclass>
    <innerclass refid="classblmc__drivers_1_1MotorInterface" prot="public">blmc_drivers::MotorInterface</innerclass>
    <innerclass refid="classblmc__drivers_1_1PDController" prot="public">blmc_drivers::PDController</innerclass>
    <innerclass refid="classblmc__drivers_1_1SafeMotor" prot="public">blmc_drivers::SafeMotor</innerclass>
    <innerclass refid="classblmc__drivers_1_1SerialReader" prot="public">blmc_drivers::SerialReader</innerclass>
    <innerclass refid="classblmc__drivers_1_1SinePositionControl" prot="public">blmc_drivers::SinePositionControl</innerclass>
    <innerclass refid="classblmc__drivers_1_1SineTorqueControl" prot="public">blmc_drivers::SineTorqueControl</innerclass>
    <innerclass refid="classblmc__drivers_1_1SpiBus" prot="public">blmc_drivers::SpiBus</innerclass>
    <innerclass refid="classblmc__drivers_1_1SpiMotorBoard" prot="public">blmc_drivers::SpiMotorBoard</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceblmc__drivers_1ab975c3be3c53a93a10c491f07a132e2b" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classblmc__drivers_1_1SafeMotor" kindref="compound">blmc_drivers::SafeMotor</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; blmc_drivers::SafeMotor &gt; blmc_drivers::SafeMotor_ptr</definition>
        <argsstring></argsstring>
        <name>SafeMotor_ptr</name>
        <briefdescription>
<para>This is a simple shortcut. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/const_torque_control.hpp" line="15" column="1" bodyfile="demos/const_torque_control.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceblmc__drivers_1a1eb492ab42b913d5bcc21d53ba7185ba" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classblmc__drivers_1_1AnalogSensor" kindref="compound">blmc_drivers::AnalogSensor</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;blmc_drivers::AnalogSensor&gt; blmc_drivers::Slider_ptr</definition>
        <argsstring></argsstring>
        <name>Slider_ptr</name>
        <briefdescription>
<para>This is a simple shortcut. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/pd_control.hpp" line="18" column="1" bodyfile="demos/pd_control.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceblmc__drivers_1a134270c90d29a9a28b64ab0e5f7158f7" prot="public" static="no">
        <type>std::pair&lt; <ref refid="namespaceblmc__drivers_1ab975c3be3c53a93a10c491f07a132e2b" kindref="member">SafeMotor_ptr</ref>, <ref refid="namespaceblmc__drivers_1a1eb492ab42b913d5bcc21d53ba7185ba" kindref="member">Slider_ptr</ref> &gt;</type>
        <definition>typedef std::pair&lt;SafeMotor_ptr, Slider_ptr&gt; blmc_drivers::PairMotorSlider</definition>
        <argsstring></argsstring>
        <name>PairMotorSlider</name>
        <briefdescription>
<para>This is a simple shortcut. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/pd_control.hpp" line="22" column="1" bodyfile="demos/pd_control.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceblmc__drivers_1add73ea2a43509013ad00665753f175e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; Type &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Type&gt; &gt; blmc_drivers::create_vector_of_pointers</definition>
        <argsstring>(const size_t &amp;size, const size_t &amp;length)</argsstring>
        <name>create_vector_of_pointers</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Create a vector of pointers. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>of the data </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>is number of pointers to be created. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>is the dimension of the data arrays. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector&lt;Ptr&lt;Type&gt;&gt; which is the a list of list of data of type Type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/blmc_drivers/devices/motor_board.hpp" line="359" column="1" bodyfile="include/blmc_drivers/devices/motor_board.hpp" bodystart="359" bodyend="369"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This namespace is the standard namespace of the package. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="demos/const_torque_control.cpp" line="12" column="1"/>
  </compounddef>
</doxygen>
