<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="demo__ethernet_8cpp" kind="file" language="C++">
    <compoundname>demo_ethernet.cpp</compoundname>
    <includes local="no">atomic</includes>
    <includes local="no">signal.h</includes>
    <includes refid="spi__motor__board_8hpp" local="yes">blmc_drivers/devices/spi_motor_board.hpp</includes>
    <includes refid="sine__position__control_8hpp" local="yes">sine_position_control.hpp</includes>
    <incdepgraph>
      <node id="296">
        <label>blmc_drivers/utils/os_interface.hpp</label>
        <link refid="os__interface_8hpp"/>
        <childnode refid="297" relation="include">
        </childnode>
        <childnode refid="298" relation="include">
        </childnode>
        <childnode refid="299" relation="include">
        </childnode>
        <childnode refid="300" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="302" relation="include">
        </childnode>
        <childnode refid="303" relation="include">
        </childnode>
        <childnode refid="304" relation="include">
        </childnode>
        <childnode refid="305" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="308" relation="include">
        </childnode>
        <childnode refid="291" relation="include">
        </childnode>
        <childnode refid="309" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="311" relation="include">
        </childnode>
        <childnode refid="312" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
      </node>
      <node id="283">
        <label>atomic</label>
      </node>
      <node id="302">
        <label>net/if.h</label>
      </node>
      <node id="291">
        <label>real_time_tools/timer.hpp</label>
      </node>
      <node id="300">
        <label>stdint.h</label>
      </node>
      <node id="313">
        <label>sys/mman.h</label>
      </node>
      <node id="298">
        <label>stdlib.h</label>
      </node>
      <node id="293">
        <label>real_time_tools/threadsafe/threadsafe_timeseries.hpp</label>
      </node>
      <node id="295">
        <label>real_time_tools/thread.hpp</label>
      </node>
      <node id="290">
        <label>string</label>
      </node>
      <node id="307">
        <label>linux/can/raw.h</label>
      </node>
      <node id="305">
        <label>sys/ioctl.h</label>
      </node>
      <node id="288">
        <label>blmc_drivers/devices/motor.hpp</label>
        <link refid="motor_8hpp"/>
        <childnode refid="289" relation="include">
        </childnode>
        <childnode refid="290" relation="include">
        </childnode>
        <childnode refid="291" relation="include">
        </childnode>
        <childnode refid="292" relation="include">
        </childnode>
        <childnode refid="293" relation="include">
        </childnode>
        <childnode refid="294" relation="include">
        </childnode>
        <childnode refid="317" relation="include">
        </childnode>
      </node>
      <node id="306">
        <label>linux/can.h</label>
      </node>
      <node id="292">
        <label>real_time_tools/threadsafe/threadsafe_object.hpp</label>
      </node>
      <node id="308">
        <label>limits.h</label>
      </node>
      <node id="316">
        <label>real_time_tools/spinner.hpp</label>
      </node>
      <node id="319">
        <label>blmc_drivers/devices/analog_sensor.hpp</label>
        <link refid="analog__sensor_8hpp"/>
        <childnode refid="289" relation="include">
        </childnode>
        <childnode refid="290" relation="include">
        </childnode>
        <childnode refid="291" relation="include">
        </childnode>
        <childnode refid="293" relation="include">
        </childnode>
        <childnode refid="317" relation="include">
        </childnode>
        <childnode refid="294" relation="include">
        </childnode>
      </node>
      <node id="315">
        <label>real_time_tools/iostream.hpp</label>
      </node>
      <node id="318">
        <label>sine_position_control.hpp</label>
        <link refid="sine__position__control_8hpp"/>
        <childnode refid="288" relation="include">
        </childnode>
        <childnode refid="319" relation="include">
        </childnode>
      </node>
      <node id="312">
        <label>condition_variable</label>
      </node>
      <node id="303">
        <label>sys/types.h</label>
      </node>
      <node id="301">
        <label>string.h</label>
      </node>
      <node id="299">
        <label>unistd.h</label>
      </node>
      <node id="284">
        <label>signal.h</label>
      </node>
      <node id="310">
        <label>sstream</label>
      </node>
      <node id="285">
        <label>blmc_drivers/devices/spi_motor_board.hpp</label>
        <link refid="spi__motor__board_8hpp"/>
        <childnode refid="286" relation="include">
        </childnode>
        <childnode refid="295" relation="include">
        </childnode>
        <childnode refid="293" relation="include">
        </childnode>
        <childnode refid="294" relation="include">
        </childnode>
      </node>
      <node id="309">
        <label>iostream</label>
      </node>
      <node id="282">
        <label>demos/demo_ethernet.cpp</label>
        <link refid="demo__ethernet_8cpp"/>
        <childnode refid="283" relation="include">
        </childnode>
        <childnode refid="284" relation="include">
        </childnode>
        <childnode refid="285" relation="include">
        </childnode>
        <childnode refid="318" relation="include">
        </childnode>
      </node>
      <node id="314">
        <label>blmc_drivers/devices/can_bus.hpp</label>
        <link refid="can__bus_8hpp"/>
        <childnode refid="289" relation="include">
        </childnode>
        <childnode refid="290" relation="include">
        </childnode>
        <childnode refid="291" relation="include">
        </childnode>
        <childnode refid="295" relation="include">
        </childnode>
        <childnode refid="315" relation="include">
        </childnode>
        <childnode refid="316" relation="include">
        </childnode>
        <childnode refid="292" relation="include">
        </childnode>
        <childnode refid="293" relation="include">
        </childnode>
        <childnode refid="296" relation="include">
        </childnode>
        <childnode refid="317" relation="include">
        </childnode>
      </node>
      <node id="286">
        <label>blmc_drivers/devices/spi_bus.hpp</label>
        <link refid="spi__bus_8hpp"/>
        <childnode refid="287" relation="include">
        </childnode>
        <childnode refid="288" relation="include">
        </childnode>
        <childnode refid="295" relation="include">
        </childnode>
        <childnode refid="293" relation="include">
        </childnode>
        <childnode refid="294" relation="include">
        </childnode>
      </node>
      <node id="311">
        <label>mutex</label>
      </node>
      <node id="304">
        <label>sys/socket.h</label>
      </node>
      <node id="317">
        <label>blmc_drivers/devices/device_interface.hpp</label>
        <link refid="device__interface_8hpp"/>
      </node>
      <node id="294">
        <label>blmc_drivers/devices/motor_board.hpp</label>
        <link refid="motor__board_8hpp"/>
        <childnode refid="289" relation="include">
        </childnode>
        <childnode refid="290" relation="include">
        </childnode>
        <childnode refid="291" relation="include">
        </childnode>
        <childnode refid="295" relation="include">
        </childnode>
        <childnode refid="296" relation="include">
        </childnode>
        <childnode refid="292" relation="include">
        </childnode>
        <childnode refid="293" relation="include">
        </childnode>
        <childnode refid="314" relation="include">
        </childnode>
        <childnode refid="317" relation="include">
        </childnode>
      </node>
      <node id="287">
        <label>master_board_sdk/master_board_interface.h</label>
      </node>
      <node id="297">
        <label>stdio.h</label>
      </node>
      <node id="289">
        <label>memory</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="demo__ethernet_8cpp_1a37348e9dd6283af4127a90367a9482d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::atomic_bool</type>
        <definition>std::atomic_bool g_stop_demo</definition>
        <argsstring>(false)</argsstring>
        <name>g_stop_demo</name>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
<para>This boolean is here to kill cleanly the application upon ctrl+c. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_ethernet.cpp" line="15" column="1"/>
      </memberdef>
      <memberdef kind="function" id="demo__ethernet_8cpp_1a3d51efaeecab2023836cefe28d4dcff4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void my_handler</definition>
        <argsstring>(int)</argsstring>
        <name>my_handler</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>This function is the callback upon a ctrl+c call from the terminal. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_ethernet.cpp" line="22" column="1" bodyfile="demos/demo_ethernet.cpp" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="demo__ethernet_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>This is the main demo program. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_ethernet.cpp" line="34" column="1" bodyfile="demos/demo_ethernet.cpp" bodystart="34" bodyend="105"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>Copyright (c) 2018-2020, New York University and Max Planck Gesellschaft, License BSD-3-Clause </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="spi__motor__board_8hpp" kindref="compound">blmc_drivers/devices/spi_motor_board.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sine__position__control_8hpp" kindref="compound">sine_position_control.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">std::atomic_bool<sp/><ref refid="demo__ethernet_8cpp_1a37348e9dd6283af4127a90367a9482d1" kindref="member">g_stop_demo</ref><sp/>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="demo__ethernet_8cpp_1a3d51efaeecab2023836cefe28d4dcff4" kindref="member">my_handler</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><ref refid="demo__ethernet_8cpp_1a37348e9dd6283af4127a90367a9482d1" kindref="member">g_stop_demo</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>demo.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="demo__ethernet_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(argc<sp/>!=<sp/>2)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Please<sp/>provide<sp/>the<sp/>network<sp/>id<sp/>as<sp/>argument.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>network_id<sp/>=<sp/>argv[1];</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>we<sp/>catch<sp/>the<sp/>ctrl+c<sp/>signal<sp/>to<sp/>kill<sp/>the<sp/>application<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>sigIntHandler;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>sigIntHandler.sa_handler<sp/>=<sp/><ref refid="demo__ethernet_8cpp_1a3d51efaeecab2023836cefe28d4dcff4" kindref="member">my_handler</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>sigemptyset(&amp;sigIntHandler.sa_mask);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>sigIntHandler.sa_flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>sigaction(SIGINT,<sp/>&amp;sigIntHandler,<sp/>NULL);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="demo__ethernet_8cpp_1a37348e9dd6283af4127a90367a9482d1" kindref="member">g_stop_demo</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>udriver<sp/>plugged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_udrivers<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>of<sp/>all<sp/>one<sp/>need<sp/>to<sp/>initialize<sp/>the<sp/>communication<sp/>with<sp/>the<sp/>master</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>board<sp/>via<sp/>ethernet.<sp/>The<sp/>include<sp/>for<sp/>this<sp/>class<sp/>comes<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>#include<sp/>&quot;blmc_drivers/devices/ethernet_wifi_motor_board.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;MasterBoardInterface&gt;<sp/>master_board_interface<sp/>=<sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;MasterBoardInterface&gt;(network_id);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>master_board_interface-&gt;Init();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;blmc_drivers::SpiBus&gt;<sp/>spi_bus<sp/>=</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;blmc_drivers::SpiBus&gt;(master_board_interface,<sp/>nb_udrivers);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>we<sp/>create<sp/>a<sp/>motor<sp/>board<sp/>object<sp/>that<sp/>will<sp/>use<sp/>the<sp/>SPI<sp/>bus<sp/>in<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>communicate<sp/>between<sp/>this<sp/>application<sp/>and<sp/>the<sp/>actual<sp/>motor<sp/>board.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Important:<sp/>the<sp/>blmc<sp/>motors<sp/>are<sp/>aligned<sp/>during<sp/>this<sp/>stage.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;blmc_drivers::SpiMotorBoard&gt;<sp/>&gt;<sp/>boards;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>boards.resize(nb_udrivers);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>boards.size()<sp/>;<sp/>++i)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boards[i]<sp/>=<sp/>std::make_shared&lt;blmc_drivers::SpiMotorBoard&gt;(spi_bus,<sp/>i);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>motors<sp/>object<sp/>that<sp/>have<sp/>an<sp/>index<sp/>that<sp/>define<sp/>the<sp/>port<sp/>on<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>they<sp/>are<sp/>plugged<sp/>on<sp/>the<sp/>motor<sp/>board.<sp/>This<sp/>object<sp/>takes<sp/>also<sp/>a<sp/>MotorBoard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>object<sp/>to<sp/>be<sp/>able<sp/>to<sp/>get<sp/>the<sp/>sensors<sp/>and<sp/>send<sp/>the<sp/>control<sp/>consistantly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>safe<sp/>motors<sp/>have<sp/>the<sp/>ability<sp/>to<sp/>bound<sp/>the<sp/>current<sp/>that<sp/>is<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;blmc_drivers::SafeMotor_ptr&gt;<sp/>motor_list;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>motor_list.resize(nb_udrivers<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>boards.size()<sp/>;<sp/>++i)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_list[2*i]<sp/>=<sp/>std::make_shared&lt;blmc_drivers::SafeMotor&gt;(boards[i],<sp/>0,<sp/>1.0);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_list[2*i<sp/>+<sp/>1]<sp/>=<sp/>std::make_shared&lt;blmc_drivers::SafeMotor&gt;(boards[i],<sp/>1,<sp/>1.0);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os__interface_8hpp_1a1acf1ce04ab7fe3a5972c0618adcbbac" kindref="member">rt_printf</ref>(</highlight><highlight class="stringliteral">&quot;motors<sp/>are<sp/>set<sp/>up<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>a<sp/>simple<sp/>PD<sp/>controller<sp/>following<sp/>a<sp/>sinus<sp/>trajectory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classblmc__drivers_1_1SinePositionControl" kindref="compound">blmc_drivers::SinePositionControl</ref><sp/>controller(motor_list);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>controller.set_gains(</highlight><highlight class="comment">/*kp=*/</highlight><highlight class="normal">2.0,<sp/></highlight><highlight class="comment">/*kd=*/</highlight><highlight class="normal">0.1);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os__interface_8hpp_1a1acf1ce04ab7fe3a5972c0618adcbbac" kindref="member">rt_printf</ref>(</highlight><highlight class="stringliteral">&quot;controllers<sp/>are<sp/>set<sp/>up<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>spi_bus-&gt;wait_until_ready();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>controller.start_loop();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os__interface_8hpp_1a1acf1ce04ab7fe3a5972c0618adcbbac" kindref="member">rt_printf</ref>(</highlight><highlight class="stringliteral">&quot;loops<sp/>have<sp/>started<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>until<sp/>the<sp/>application<sp/>is<sp/>killed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!<ref refid="demo__ethernet_8cpp_1a37348e9dd6283af4127a90367a9482d1" kindref="member">g_stop_demo</ref>)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_time_tools::Timer::sleep_sec(0.01);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="demos/demo_ethernet.cpp"/>
  </compounddef>
</doxygen>
