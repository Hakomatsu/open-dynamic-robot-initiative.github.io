<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="AtiFTSensor_8cpp" kind="file" language="C++">
    <compoundname>AtiFTSensor.cpp</compoundname>
    <includes local="no">errno.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">string</includes>
    <includes local="no">cstdio</includes>
    <includes refid="AtiFTSensor_8h" local="no">AtiFTSensor.h</includes>
    <incdepgraph>
      <node id="20">
        <label>netinet/in.h</label>
      </node>
      <node id="21">
        <label>arpa/inet.h</label>
      </node>
      <node id="25">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="19">
        <label>AtiFTSensor.h</label>
        <link refid="AtiFTSensor_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>errno.h</label>
      </node>
      <node id="23">
        <label>real_time_tools/thread.hpp</label>
      </node>
      <node id="14">
        <label>src/AtiFTSensor.cpp</label>
        <link refid="AtiFTSensor_8cpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>string</label>
      </node>
      <node id="24">
        <label>boost/thread.hpp</label>
      </node>
      <node id="18">
        <label>cstdio</label>
      </node>
      <node id="16">
        <label>unistd.h</label>
      </node>
      <node id="26">
        <label>boost/bind.hpp</label>
      </node>
      <node id="22">
        <label>mutex</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceati__ft__sensor">ati_ft_sensor</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="AtiFTSensor_8cpp_1ac420926cbb955a79a41eba7cec1bc1c8" prot="public" static="no">
        <name>rt_dev_socket</name>
        <initializer>socket</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/AtiFTSensor.cpp" line="17" column="9" bodyfile="src/AtiFTSensor.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AtiFTSensor_8cpp_1a81e55d2bdf351cd53218a3085ba56955" prot="public" static="no">
        <name>rt_dev_ioctl</name>
        <initializer>ioctl</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/AtiFTSensor.cpp" line="18" column="9" bodyfile="src/AtiFTSensor.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AtiFTSensor_8cpp_1a7be59cefa5f5e5da067c04078f504aa6" prot="public" static="no">
        <name>rt_dev_close</name>
        <initializer>close</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/AtiFTSensor.cpp" line="19" column="9" bodyfile="src/AtiFTSensor.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AtiFTSensor_8cpp_1a80d28afb04b8db1e0192593ebcb4d07b" prot="public" static="no">
        <name>rt_dev_setsockopt</name>
        <initializer>setsockopt</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/AtiFTSensor.cpp" line="20" column="9" bodyfile="src/AtiFTSensor.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AtiFTSensor_8cpp_1a68219f584f63b92f4d23bd708140056d" prot="public" static="no">
        <name>rt_dev_bind</name>
        <initializer>bind</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/AtiFTSensor.cpp" line="21" column="9" bodyfile="src/AtiFTSensor.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AtiFTSensor_8cpp_1ad0e9f34af023399e7be8c03615e80efd" prot="public" static="no">
        <name>rt_dev_recv</name>
        <initializer>recv</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/AtiFTSensor.cpp" line="22" column="9" bodyfile="src/AtiFTSensor.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AtiFTSensor_8cpp_1ab599460d70a4af2e3bcb07b395f13ad4" prot="public" static="no">
        <name>rt_dev_recvmsg</name>
        <initializer>recvmsg</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/AtiFTSensor.cpp" line="23" column="9" bodyfile="src/AtiFTSensor.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AtiFTSensor_8cpp_1aee2e62c1c9f4b24e179599e4eb8ccab4" prot="public" static="no">
        <name>rt_dev_send</name>
        <initializer>send</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/AtiFTSensor.cpp" line="24" column="9" bodyfile="src/AtiFTSensor.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AtiFTSensor_8cpp_1ad9b081422ea995f98485f5545e20211d" prot="public" static="no">
        <name>rt_dev_sendto</name>
        <initializer>sendto</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/AtiFTSensor.cpp" line="25" column="9" bodyfile="src/AtiFTSensor.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AtiFTSensor_8cpp_1a515cc6b2511d5b01e2065063de68f1ac" prot="public" static="no">
        <name>rt_dev_connect</name>
        <initializer>connect</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/AtiFTSensor.cpp" line="26" column="9" bodyfile="src/AtiFTSensor.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AtiFTSensor_8cpp_1a287d43304d3d1a80c4bad0f4288a4b16" prot="public" static="no">
        <name>rt_mutex_acquire</name>
        <param><defname>mutex</defname></param>
        <param><defname>d</defname></param>
        <initializer>((mutex)-&gt;lock())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/AtiFTSensor.cpp" line="28" column="9" bodyfile="src/AtiFTSensor.cpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AtiFTSensor_8cpp_1a1a9d107f804dd36b51ca73af68aa8665" prot="public" static="no">
        <name>rt_mutex_release</name>
        <param><defname>mutex</defname></param>
        <initializer>((mutex)-&gt;unlock())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/AtiFTSensor.cpp" line="29" column="9" bodyfile="src/AtiFTSensor.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>AtiFTSensor.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>Oct<sp/>22,<sp/>2013</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>righetti</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XENOMAI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;rtnet.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;native/timer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>xenomai<sp/>like<sp/>API<sp/>for<sp/>normal<sp/>linux<sp/>using<sp/>defines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rt_dev_socket<sp/>socket</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rt_dev_ioctl<sp/>ioctl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rt_dev_close<sp/>close</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rt_dev_setsockopt<sp/>setsockopt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rt_dev_bind<sp/>bind</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rt_dev_recv<sp/>recv</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rt_dev_recvmsg<sp/>recvmsg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rt_dev_send<sp/>send</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rt_dev_sendto<sp/>sendto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rt_dev_connect<sp/>connect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rt_mutex_acquire(mutex,<sp/>d)<sp/>((mutex)-&gt;lock())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rt_mutex_release(mutex)<sp/>((mutex)-&gt;unlock())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AtiFTSensor_8h" kindref="compound">AtiFTSensor.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceati__ft__sensor" kindref="compound">ati_ft_sensor</ref></highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal">AtiFTSensor::AtiFTSensor()</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>initialized_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AtiFTSensor::initialize()</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(initialized_)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;warning<sp/>already<sp/>initialized\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;initializing\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//init<sp/>some<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;3;<sp/>++i)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>F_bias_[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>T_bias_[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>initialized_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>going_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>streaming_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//setup<sp/>the<sp/>networking<sp/>sockets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>memset(&amp;local_address_,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr_in));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>memset(&amp;remote_address_,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr_in));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>local_address_.sin_family<sp/>=<sp/>AF_INET;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>local_address_.sin_addr.s_addr<sp/>=<sp/>INADDR_ANY;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>local_address_.sin_port<sp/>=<sp/>htons(49152);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>remote_address_.sin_family<sp/>=<sp/>AF_INET;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>inet_aton(</highlight><highlight class="stringliteral">&quot;192.168.4.1&quot;</highlight><highlight class="normal">,&amp;(remote_address_.sin_addr));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>remote_address_.sin_port<sp/>=<sp/>htons(49152);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>socket_<sp/>=<sp/>rt_dev_socket(AF_INET,<sp/>SOCK_DGRAM,<sp/>0);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(socket_&lt;0)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;cannot<sp/>create<sp/>socket,<sp/>error<sp/>%d,<sp/>%s\n&quot;</highlight><highlight class="normal">,errno,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rt_dev_bind(socket_,<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr<sp/>*)<sp/>&amp;local_address_,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr_in))<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;cannot<sp/>bind<sp/>socket,<sp/>error:<sp/>%d,<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>errno,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rt_dev_connect(socket_,<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr<sp/>*)<sp/>&amp;remote_address_,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr_in))<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;cannot<sp/>connect<sp/>socket,<sp/>error:<sp/>%d,<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>errno,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;created<sp/>sockets\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XENOMAI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rt_pipe_create(&amp;stream_pipe_,<sp/></highlight><highlight class="stringliteral">&quot;ati_ft_stream&quot;</highlight><highlight class="normal">,P_MINOR_AUTO,0))</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;cannot<sp/>create<sp/>pipe,<sp/>error:<sp/>%d,<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>errno,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//create<sp/>mutex<sp/>for<sp/>the<sp/>threads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>rt_mutex_create(&amp;mutex_,NULL);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//now<sp/>create<sp/>the<sp/>reading<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>reading_thread_.create_realtime_thread(</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;ati_ft_sensor::AtiFTSensor::read_ft,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>initialized_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>initialized_;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AtiFTSensor::read_ft()</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//send<sp/>message<sp/>to<sp/>start<sp/>streaming</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>send_msg<sp/>msg;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>msg.command_header<sp/>=<sp/>htons(0x1234);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>msg.command<sp/>=<sp/>htons(0x0002);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>msg.sample_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>rt_dev_send(socket_,<sp/>&amp;msg,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(msg),<sp/>0);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//some<sp/>internal<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>internal_going<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XENOMAI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>RTIME<sp/>time1,<sp/>time2;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>time2<sp/>=<sp/>rt_timer_read();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//the<sp/>main<sp/>reading<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(internal_going)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XENOMAI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>time1<sp/>=<sp/>rt_timer_read();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//read<sp/>the<sp/>socket</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>received_msg<sp/>rcv_msg;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>ssize_t<sp/>response<sp/>=<sp/>rt_dev_recv(socket_,<sp/>&amp;rcv_msg,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rcv_msg),<sp/>0);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(response<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rcv_msg))</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Received<sp/>message<sp/>of<sp/>unexpected<sp/>length<sp/>%ld\n&quot;</highlight><highlight class="normal">,<sp/>response);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>state<sp/>/<sp/>first<sp/>get<sp/>the<sp/>byte<sp/>order<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>rt_mutex_acquire(&amp;mutex_,TM_INFINITE);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>rdt_sequence_<sp/>=<sp/>ntohl(rcv_msg.rdt_sequence);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>ft_sequence_<sp/>=<sp/>ntohl(rcv_msg.ft_sequence);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>status_<sp/>=<sp/>ntohl(rcv_msg.status);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>rcv_msg.Fx<sp/>=<sp/>ntohl(rcv_msg.Fx);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>rcv_msg.Fy<sp/>=<sp/>ntohl(rcv_msg.Fy);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>rcv_msg.Fz<sp/>=<sp/>ntohl(rcv_msg.Fz);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>rcv_msg.Tx<sp/>=<sp/>ntohl(rcv_msg.Tx);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>rcv_msg.Ty<sp/>=<sp/>ntohl(rcv_msg.Ty);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>rcv_msg.Tz<sp/>=<sp/>ntohl(rcv_msg.Tz);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>F_[0]<sp/>=<sp/>double(rcv_msg.Fx)/count_per_force_<sp/>-<sp/>F_bias_[0];</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>F_[1]<sp/>=<sp/>double(rcv_msg.Fy)/count_per_force_<sp/>-<sp/>F_bias_[1];</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>F_[2]<sp/>=<sp/>double(rcv_msg.Fz)/count_per_force_<sp/>-<sp/>F_bias_[2];</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>T_[0]<sp/>=<sp/>double(rcv_msg.Tx)/count_per_torque_<sp/>-<sp/>T_bias_[0];</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>T_[1]<sp/>=<sp/>double(rcv_msg.Ty)/count_per_torque_<sp/>-<sp/>T_bias_[1];</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>T_[2]<sp/>=<sp/>double(rcv_msg.Tz)/count_per_torque_<sp/>-<sp/>T_bias_[2];</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>streaming<sp/>mode,<sp/>copy<sp/>to<sp/>pipe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(streaming_)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XENOMAI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>steaming_msg<sp/>log;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log.rdt_seq<sp/>=<sp/>rdt_sequence_;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log.ft_seq<sp/>=<sp/>ft_sequence_;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log.status<sp/>=<sp/>status_;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;3;<sp/>++i)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log.F[i]<sp/>=<sp/>F_[i];</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log.T[i]<sp/>=<sp/>T_[i];</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log.time<sp/>=<sp/>double(time1-time2)/10e9;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>time2<sp/>=<sp/>time1;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rt_pipe_write(&amp;stream_pipe_,&amp;log,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(log),<sp/>P_NORMAL);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Streaming<sp/>is<sp/>only<sp/>supported<sp/>on<sp/>xenomai.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_going<sp/>=<sp/>going_;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>rt_mutex_release(&amp;mutex_);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//stop<sp/>streaming</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>msg.command<sp/>=<sp/>0x0000;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>rt_dev_send(socket_,<sp/>&amp;msg,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(msg),<sp/>0);</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AtiFTSensor::setBias()</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>force<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>torque<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>setBias(force,<sp/>torque);</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AtiFTSensor::setBias(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>force,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>torque)</highlight></codeline>
<codeline lineno="196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>rt_mutex_acquire(&amp;mutex_,TM_INFINITE);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;3;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(force<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>F_bias_[i]<sp/>=<sp/>F_[i];</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>F_bias_[i]<sp/>=<sp/>force[i];</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(torque<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T_bias_[i]<sp/>=<sp/>T_[i];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T_bias_[i]<sp/>=<sp/>torque[i];</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>rt_mutex_release(&amp;mutex_);</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AtiFTSensor::resetBias()</highlight></codeline>
<codeline lineno="214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>rt_mutex_acquire(&amp;mutex_,TM_INFINITE);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;3;<sp/>++i)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>F_bias_[i]<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>T_bias_[i]<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>rt_mutex_release(&amp;mutex_);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AtiFTSensor::getStatus(uint32_t&amp;<sp/>rdt_seq,<sp/>uint32_t&amp;<sp/>ft_seq,<sp/>uint32_t&amp;<sp/>status)</highlight></codeline>
<codeline lineno="226"><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>rt_mutex_acquire(&amp;mutex_,TM_INFINITE);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>rdt_seq<sp/>=<sp/>rdt_sequence_;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>ft_seq<sp/>=<sp/>ft_sequence_;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>status_;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>rt_mutex_release(&amp;mutex_);</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AtiFTSensor::getFT(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>force,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>torque)</highlight></codeline>
<codeline lineno="237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>rt_mutex_acquire(&amp;mutex_,TM_INFINITE);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;3;<sp/>++i)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>force[i]<sp/>=<sp/>F_[i];</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>torque[i]<sp/>=<sp/>T_[i];</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>rt_mutex_release(&amp;mutex_);</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AtiFTSensor::stop()</highlight></codeline>
<codeline lineno="250"><highlight class="normal">{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(initialized_)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>rt_mutex_acquire(&amp;mutex_,TM_INFINITE);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>going_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>rt_mutex_release(&amp;mutex_);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>reading_thread_.join();</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>rt_dev_close(socket_);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XENOMAI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>rt_pipe_delete(&amp;stream_pipe_);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>initialized_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AtiFTSensor::stream(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stream)</highlight></codeline>
<codeline lineno="266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>rt_mutex_acquire(&amp;mutex_,TM_INFINITE);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>streaming_<sp/>=<sp/>stream;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>rt_mutex_release(&amp;mutex_);</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal">AtiFTSensor::~AtiFTSensor()</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>stop();</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/AtiFTSensor.cpp"/>
  </compounddef>
</doxygen>
