<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="md_docs_timeseries" kind="page">
    <compoundname>md_docs_timeseries</compoundname>
    <title>Logic of Actions and Observations</title>
    <detaileddescription>
<para>In this section the logic of the <emphasis>time series</emphasis> used for communication between front and back end and for synchronization between actions and observations is explained. For more details, please see our <ulink url="https://arxiv.org/abs/2008.03596">paper</ulink> on the open-source version of the TriFinger robot.</para><para><heading level="2">On Time Series and Time Relation of Actions and Observations </heading>
</para><para>All data transfer between the front end (= user code) and the back end (= robot hardware) goes through so called time series. When calling <computeroutput>append_desired_action(action)</computeroutput>, the action is not applied immediately but is <emphasis>appended</emphasis> to the time series of desired actions which serves as a queue.</para><para>At each time step, identified by a <emphasis>time index t</emphasis>, the backend takes the action at position <emphasis>t</emphasis> from the &quot;desired actions&quot; time series and sends it to the robot driver. At the same time an observation is acquired from the robot and added to the &quot;observation&quot; time series. This means that the effect of the desired action <computeroutput>a_t</computeroutput> is not yet visible in the observation <computeroutput>y_t</computeroutput> as is illustrated below. (`a&apos;_t` corresponds to the <emphasis>applied action</emphasis>, see <ref refid="md_docs_desired_vs_applied_action" kindref="compound">Desired vs Applied Action</ref>)</para><para><image type="html" name="action_observation_timing.png">Time relation of actions and observations</image>
</para><para><computeroutput>append_desired_action()</computeroutput> returns the time index <computeroutput>t</computeroutput> at which the appended action will be executed. Methods like <computeroutput>get_observation()</computeroutput> expect a time index as input. If the specified time step has already passed, they immediately return the value from the corresponding step. If it lies in the future, the method will block and wait until the specified time step is reached and then return.</para><para>Note that the buffer size of the time series is limited (see the <computeroutput>history_length</computeroutput> argument of <computeroutput>SingleProcessRobotData</computeroutput> and <computeroutput>MultiProcessRobotData</computeroutput>). If the buffer is full, the oldest element is discarded. Trying to access an time index that is not in the buffer anymore results in an exception.</para><para>This design allows for simple code that is automatically executed at the control rate of the robot:</para><para><programlisting><codeline><highlight class="comment">#<sp/>send<sp/>zero-torque<sp/>action<sp/>to<sp/>get<sp/>first<sp/>observation,<sp/>see<sp/>explanation<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">zero_torque_action<sp/>=<sp/>robot_interfaces.trifinger.Action()</highlight></codeline>
<codeline><highlight class="normal">t<sp/>=<sp/>frontend.append_desired_action(zero_torque_action)</highlight></codeline>
<codeline><highlight class="normal">observation<sp/>=<sp/>frontend.get_observation(t)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>action<sp/>=<sp/>smart_algorithm_to_compute_next_action(observation)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>frontend.append_desired_action(action)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>t<sp/>given<sp/>above<sp/>refers<sp/>to<sp/>the<sp/>moment<sp/>the<sp/>given<sp/>action<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>executed.<sp/><sp/>Right<sp/>now,<sp/>this<sp/>is<sp/>in<sp/>the<sp/>future,<sp/>so<sp/>the<sp/>following<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>will<sp/>automatically<sp/>wait<sp/>until<sp/>the<sp/>action<sp/>is<sp/>actually<sp/>applied<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>platform</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>observation<sp/>=<sp/>frontend.get_observation(t)</highlight></codeline>
</programlisting></para><para><heading level="3">Send Action to Start Backend</heading>
</para><para>In the beginning of the program execution, the back end is idle and waiting for the first action. Only after the first action is received, the loop is started that applies actions and writes observations to the time series.</para><para>This means <bold>you first have to send an action before you can read the first observation!</bold></para><para>There are applications where an observation is needed before sending the first real action (e.g. when the action depends on the current position). In this case you need to send a &quot;neutral&quot; action first. How this action may look is robot dependent. The <emphasis>TriFinger</emphasis> robot, for example, can safely be started with a zero-torque action:</para><para>Python:</para><para><programlisting><codeline><highlight class="comment">#<sp/>an<sp/>action<sp/>without<sp/>arguments<sp/>defaults<sp/>to<sp/>zero<sp/>torque</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">zero_torque_action<sp/>=<sp/>robot_interfaces.trifinger.Action()</highlight></codeline>
<codeline><highlight class="normal">t<sp/>=<sp/>frontend.append_desired_action(zero_torque_action)</highlight></codeline>
<codeline><highlight class="normal">first_observation<sp/>=<sp/>frontend.get_observation(t)</highlight></codeline>
</programlisting></para><para>C++:</para><para><programlisting><codeline><highlight class="normal">Action<sp/>zero_torque_action<sp/>=<sp/>Action::Zero();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>frontend.append_desired_action(zero_torque_action);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>first_observation<sp/>=<sp/>frontend.get_observation(t);</highlight></codeline>
</programlisting></para><para>Note that the creation of the zero torque action in the above example is specific to the <emphasis>TriFinger</emphasis> robot. For other robots, the creation of the action would need to be adjusted to the action type of that specific robot.</para><para>If the back end reaches a time step <computeroutput>t</computeroutput> but the user did not yet provide an action for this time step (e.g. because the user code is running slower than 1 kHz), the back end automatically sets the desired action for step <computeroutput>t</computeroutput> to the same as the one of <computeroutput>t - 1</computeroutput>.</para><para>This is indicated to the user through the <computeroutput>action_repetitions</computeroutput> field in the status message which contains the number of times the current action has been repeated. </para>    </detaileddescription>
  </compounddef>
</doxygen>
