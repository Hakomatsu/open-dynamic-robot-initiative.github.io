<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classrobot__interfaces_1_1MultiProcessRobotData" kind="class" language="C++" prot="public">
    <compoundname>robot_interfaces::MultiProcessRobotData</compoundname>
    <basecompoundref refid="classrobot__interfaces_1_1RobotData" prot="public" virt="non-virtual">robot_interfaces::RobotData&lt; Action, Observation &gt;</basecompoundref>
    <includes refid="robot__data_8hpp" local="no">robot_data.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Action</type>
      </param>
      <param>
        <type>typename Observation</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrobot__interfaces_1_1MultiProcessRobotData_1a27bb5ee187ceacb386d89c828481b057" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>robot_interfaces::MultiProcessRobotData&lt; Action, Observation &gt;::MultiProcessRobotData</definition>
        <argsstring>(const std::string &amp;shared_memory_id_prefix, bool is_master, size_t history_length=1000)</argsstring>
        <name>MultiProcessRobotData</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>shared_memory_id_prefix</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_master</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>history_length</declname>
          <defval>1000</defval>
        </param>
        <briefdescription>
<para>Construct the time series for the robot data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shared_memory_id_prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefix for the shared memory IDs. Since each time series needs its own memory ID, the given value is used as prefix and unique suffixes are appended. Make sure to use a prefix that cannot lead to name collisions on your system. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_master</parametername>
</parameternamelist>
<parameterdescription>
<para>If set to true, this instance will clear the shared memory on construction and destruction. Only once instance should act as master in a multi-process setup. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>history_length</parametername>
</parameternamelist>
<parameterdescription>
<para>History length of the time series. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_data.hpp" line="129" column="1" bodyfile="include/robot_interfaces/robot_data.hpp" bodystart="129" bodyend="168"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classrobot__interfaces_1_1RobotData" kindref="compound">RobotData</ref> instance using multi process time series. </para>    </briefdescription>
    <detaileddescription>
<para>Use this class if modules accessing the data are running in separate processes. When all modules run as threads in the same process, this class can be used as well, however, <ref refid="classrobot__interfaces_1_1SingleProcessRobotData" kindref="compound">SingleProcessRobotData</ref> might be more efficient in that case.</para><para>Contains all the input and output data of the robot. This means the<itemizedlist>
<listitem><para><computeroutput>desired_action</computeroutput> which was requested by the robot user</para></listitem><listitem><para><computeroutput>applied_action</computeroutput> which was actually applied and may not be and may not be identical to desired_action for safety reasons</para></listitem><listitem><para><computeroutput>observation</computeroutput> made by the robot</para></listitem><listitem><para><computeroutput>status</computeroutput> which keeps track of timing issues and errors.</para></listitem></itemizedlist>
</para><para>See this graph to understand how they relate to each other precisely in terms of time:</para><para><verbatim>|------ t = 0 ------|------ t = 1 ------|
|----- action0 -----|----- action1 -----|
o                   o                   o
b                   b                   b
s                   s                   s
0                   1                   2
</verbatim></para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Action</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the actions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Observation</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the observations. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classrobot__interfaces_1_1SingleProcessRobotData" kindref="compound">SingleProcessRobotData</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="31">
        <label>robot_interfaces::RobotData&lt; Action, Observation &gt;</label>
        <link refid="classrobot__interfaces_1_1RobotData"/>
      </node>
      <node id="30">
        <label>robot_interfaces::MultiProcessRobotData&lt; Action, Observation &gt;</label>
        <link refid="classrobot__interfaces_1_1MultiProcessRobotData"/>
        <childnode refid="31" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="33">
        <label>robot_interfaces::RobotData&lt; Action, Observation &gt;</label>
        <link refid="classrobot__interfaces_1_1RobotData"/>
      </node>
      <node id="32">
        <label>robot_interfaces::MultiProcessRobotData&lt; Action, Observation &gt;</label>
        <link refid="classrobot__interfaces_1_1MultiProcessRobotData"/>
        <childnode refid="33" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/robot_interfaces/robot_data.hpp" line="115" column="1" bodyfile="include/robot_interfaces/robot_data.hpp" bodystart="114" bodyend="169"/>
    <listofallmembers>
      <member refid="classrobot__interfaces_1_1RobotData_1a05fea4d2f75f7fc34daf2bfc71fbfc4b" prot="public" virt="non-virtual"><scope>robot_interfaces::MultiProcessRobotData</scope><name>applied_action</name></member>
      <member refid="classrobot__interfaces_1_1RobotData_1a03b4160b90de7eac5ffb67cb8a872cee" prot="public" virt="non-virtual"><scope>robot_interfaces::MultiProcessRobotData</scope><name>desired_action</name></member>
      <member refid="classrobot__interfaces_1_1MultiProcessRobotData_1a27bb5ee187ceacb386d89c828481b057" prot="public" virt="non-virtual"><scope>robot_interfaces::MultiProcessRobotData</scope><name>MultiProcessRobotData</name></member>
      <member refid="classrobot__interfaces_1_1RobotData_1ae3d13595b92f82f76b0f1df2961258bd" prot="public" virt="non-virtual"><scope>robot_interfaces::MultiProcessRobotData</scope><name>observation</name></member>
      <member refid="classrobot__interfaces_1_1RobotData_1ad271ee62179d5a16ede25d399659813e" prot="protected" virt="non-virtual"><scope>robot_interfaces::MultiProcessRobotData</scope><name>RobotData</name></member>
      <member refid="classrobot__interfaces_1_1RobotData_1a47c53daf923c30981d15008e5134f648" prot="public" virt="non-virtual"><scope>robot_interfaces::MultiProcessRobotData</scope><name>status</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
