<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classrobot__interfaces_1_1RobotLogger" kind="class" language="C++" prot="public">
    <compoundname>robot_interfaces::RobotLogger</compoundname>
    <includes refid="robot__logger_8hpp" local="no">robot_logger.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Action</type>
      </param>
      <param>
        <type>typename Observation</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrobot__interfaces_1_1RobotLogger_1a913d7af3357263aeb4b4296af92d417b" prot="private" static="no" mutable="no">
        <type>std::thread</type>
        <definition>std::thread robot_interfaces::RobotLogger&lt; Action, Observation &gt;::thread_</definition>
        <argsstring></argsstring>
        <name>thread_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="163" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobot__interfaces_1_1RobotLogger_1ad1391bc38ff516f01b3c8bdd91e27efc" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classrobot__interfaces_1_1RobotData" kindref="compound">robot_interfaces::RobotData</ref>&lt; Action, Observation &gt; &gt;</type>
        <definition>std::shared_ptr&lt;robot_interfaces::RobotData&lt;Action, Observation&gt; &gt; robot_interfaces::RobotLogger&lt; Action, Observation &gt;::logger_data_</definition>
        <argsstring></argsstring>
        <name>logger_data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="166" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobot__interfaces_1_1RobotLogger_1a0465f86efac78a429f8980bd2a12959e" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int robot_interfaces::RobotLogger&lt; Action, Observation &gt;::block_size_</definition>
        <argsstring></argsstring>
        <name>block_size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="168" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobot__interfaces_1_1RobotLogger_1ac47398855bcb94ca8a3e83334ee1d382" prot="private" static="no" mutable="no">
        <type>long int</type>
        <definition>long int robot_interfaces::RobotLogger&lt; Action, Observation &gt;::index_</definition>
        <argsstring></argsstring>
        <name>index_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="169" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobot__interfaces_1_1RobotLogger_1afeed0904c937b1fd7f88512456e98b80" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; robot_interfaces::RobotLogger&lt; Action, Observation &gt;::stop_was_called_</definition>
        <argsstring></argsstring>
        <name>stop_was_called_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="171" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobot__interfaces_1_1RobotLogger_1a7b3d0546de38f9ce6ba8ef8302126f59" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; robot_interfaces::RobotLogger&lt; Action, Observation &gt;::is_running_</definition>
        <argsstring></argsstring>
        <name>is_running_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="172" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobot__interfaces_1_1RobotLogger_1aa03a18fb24545744533c39e193c5920a" prot="private" static="no" mutable="no">
        <type>std::ofstream</type>
        <definition>std::ofstream robot_interfaces::RobotLogger&lt; Action, Observation &gt;::output_file_</definition>
        <argsstring></argsstring>
        <name>output_file_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="174" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobot__interfaces_1_1RobotLogger_1a180a1ad565fd1a2342c6a40465fea731" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string robot_interfaces::RobotLogger&lt; Action, Observation &gt;::output_file_name_</definition>
        <argsstring></argsstring>
        <name>output_file_name_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="175" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="175" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrobot__interfaces_1_1RobotLogger_1aacc60628e6fd5ca26f15dfe51763697d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>robot_interfaces::RobotLogger&lt; Action, Observation &gt;::RobotLogger</definition>
        <argsstring>(std::shared_ptr&lt; robot_interfaces::RobotData&lt; Action, Observation &gt;&gt; robot_data, int block_size=100)</argsstring>
        <name>RobotLogger</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classrobot__interfaces_1_1RobotData" kindref="compound">robot_interfaces::RobotData</ref>&lt; Action, Observation &gt;&gt;</type>
          <declname>robot_data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>block_size</declname>
          <defval>100</defval>
        </param>
        <briefdescription>
<para>Initialize logger. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>robot_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the robot data instance. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Block size for writing data to the file when running the logger in the background. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="74" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="74" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__interfaces_1_1RobotLogger_1aaa91bf14d3de20fed756c8aa5d60c5c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual robot_interfaces::RobotLogger&lt; Action, Observation &gt;::~RobotLogger</definition>
        <argsstring>()</argsstring>
        <name>~RobotLogger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="85" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__interfaces_1_1RobotLogger_1a7a1b50c75aab3255ac7e6d412de833d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void robot_interfaces::RobotLogger&lt; Action, Observation &gt;::start</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>start</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Start a thread to continuously log to file in the background. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classrobot__interfaces_1_1RobotLogger_1a55ec7dcacd849adee53fa49a2a0c8234" kindref="member">stop()</ref> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the log file. Existing files will be overwritten! </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="97" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="97" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__interfaces_1_1RobotLogger_1a55ec7dcacd849adee53fa49a2a0c8234" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void robot_interfaces::RobotLogger&lt; Action, Observation &gt;::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <briefdescription>
<para>Stop logging that was started with <computeroutput><ref refid="classrobot__interfaces_1_1RobotLogger_1a7a1b50c75aab3255ac7e6d412de833d1" kindref="member">start()</ref></computeroutput> previously. </para>        </briefdescription>
        <detaileddescription>
<para>Does nothing if logger is not currently running. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="109" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="109" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__interfaces_1_1RobotLogger_1ada7467fbac96a67ab798c4e6ef56c9b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void robot_interfaces::RobotLogger&lt; Action, Observation &gt;::write_current_buffer</definition>
        <argsstring>(const std::string filename, long int start_index=0)</argsstring>
        <name>write_current_buffer</name>
        <param>
          <type>const std::string</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>start_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Write current content of robot data to log file. </para>        </briefdescription>
        <detaileddescription>
<para>Logs the whole content of the robot data starting from the time index specified by <computeroutput>start_index</computeroutput> until the current time index. If <computeroutput>start_index</computeroutput> is too old (i.e. not inside the robot data buffer anymore), logging will start at the oldest available time index instead.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the log file. Existing files will be overwritten! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Time index at which to start logging. If not specified, the whole buffer is logged. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>If called while the logger thread is running. In case the logger thread was started via <computeroutput><ref refid="classrobot__interfaces_1_1RobotLogger_1a7a1b50c75aab3255ac7e6d412de833d1" kindref="member">start()</ref></computeroutput>, it needs to be stopped by calling <computeroutput><ref refid="classrobot__interfaces_1_1RobotLogger_1a55ec7dcacd849adee53fa49a2a0c8234" kindref="member">stop()</ref></computeroutput> before <computeroutput><ref refid="classrobot__interfaces_1_1RobotLogger_1ada7467fbac96a67ab798c4e6ef56c9b1" kindref="member">write_current_buffer()</ref></computeroutput> can be used. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="145" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="145" bodyend="160"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classrobot__interfaces_1_1RobotLogger_1a9bcf9c2eaadd6e87b410daf65e0b3f07" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; robot_interfaces::RobotLogger&lt; Action, Observation &gt;::construct_header</definition>
        <argsstring>()</argsstring>
        <name>construct_header</name>
        <briefdescription>
<para>To get the title of the log file, describing all the information that will be logged in it. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>header The title of the log file. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="183" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="183" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__interfaces_1_1RobotLogger_1ab27971e5fd581e7cd8b8e449f5892637" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void robot_interfaces::RobotLogger&lt; Action, Observation &gt;::append_names_to_header</definition>
        <argsstring>(const std::string &amp;identifier, const std::vector&lt; std::string &gt; &amp;field_name, const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;field_data, std::vector&lt; std::string &gt; &amp;header)</argsstring>
        <name>append_names_to_header</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>field_name</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;</type>
          <declname>field_data</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>header</declname>
        </param>
        <briefdescription>
<para>Fills in the name information of each field to be logged according to the size of the field. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>The structure the field corresponds to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the field </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The field data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&amp;header</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the header of the log file </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="223" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="223" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__interfaces_1_1RobotLogger_1a3ff864106933593e16e5f3d6b5a8c4c2" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void robot_interfaces::RobotLogger&lt; Action, Observation &gt;::write_header_to_file</definition>
        <argsstring>()</argsstring>
        <name>write_header_to_file</name>
        <briefdescription>
<para>Write the header to the log file. </para>        </briefdescription>
        <detaileddescription>
<para>This overwrites existing files! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="251" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="251" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__interfaces_1_1RobotLogger_1aae435545ce6d6b273b190859fdd30719" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void robot_interfaces::RobotLogger&lt; Action, Observation &gt;::append_robot_data_to_file</definition>
        <argsstring>(long int start_index, long int block_size)</argsstring>
        <name>append_robot_data_to_file</name>
        <param>
          <type>long int</type>
          <declname>start_index</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>block_size</declname>
        </param>
        <briefdescription>
<para>Writes a block of time steps to the log file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Time index marking the beginning of the block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of time steps that are written to the log file. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="270" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="270" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__interfaces_1_1RobotLogger_1ac37dfe19cbd427ba3ecf1238e8a64bed" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void robot_interfaces::RobotLogger&lt; Action, Observation &gt;::append_field_data_to_file</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;field_data)</argsstring>
        <name>append_field_data_to_file</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;</type>
          <declname>field_data</declname>
        </param>
        <briefdescription>
<para>Appends the data corresponding to every field at the same time index to the log file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The field data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="324" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="324" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__interfaces_1_1RobotLogger_1ad21b7aa8531a57bb3740ac5282093815" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void robot_interfaces::RobotLogger&lt; Action, Observation &gt;::loop</definition>
        <argsstring>()</argsstring>
        <name>loop</name>
        <briefdescription>
<para>Writes everything to the log file. </para>        </briefdescription>
        <detaileddescription>
<para>It dumps all the data corresponding to block_size_ number of time indices at one go. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="341" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="341" bodyend="383"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Log robot data (observations, actions, status) to file. </para>    </briefdescription>
    <detaileddescription>
<para>Logs for each time step the time index, timestamp, and the values Observation, Action, and <ref refid="structrobot__interfaces_1_1Status" kindref="compound">Status</ref>. The data is written to a text file, one line per time step with values separated by spaces. This format can easily be read e.g. with NumPy or Pandas.</para><para>There are two different ways of using the logger:</para><para><orderedlist>
<listitem><para>Write all the data from the time series to the file in one function call. Use this if the time series buffer is big enough to cover the whole time span that you want to log. This way all the data is written to the file in the end, when the robot is not moving anymore. This way it will not interfere with the running robot but there is the risk of losing all data in case the software crashes before writing the log. Use the method <computeroutput><ref refid="classrobot__interfaces_1_1RobotLogger_1ada7467fbac96a67ab798c4e6ef56c9b1" kindref="member">write_current_buffer()</ref></computeroutput> for this.</para></listitem><listitem><para>Run the logger in the background and write blocks of data to the log file while the robot is running. This has the advantage that arbitrary time spans can be logged independent of the buffer size of the time series. Further in case of a software crash not all data will be lost but only the data since the last block was written. However, it has the huge disadvantage that writing to the file may cause delays in the real-time critical robot code, thus causing the robot to shut down if timing constraints are violated. Use the <computeroutput><ref refid="classrobot__interfaces_1_1RobotLogger_1a7a1b50c75aab3255ac7e6d412de833d1" kindref="member">start()</ref></computeroutput> and <computeroutput><ref refid="classrobot__interfaces_1_1RobotLogger_1a55ec7dcacd849adee53fa49a2a0c8234" kindref="member">stop()</ref></computeroutput> methods for this.</para></listitem></orderedlist>
</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Action</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the robot action. Must derive from <ref refid="classrobot__interfaces_1_1Loggable" kindref="compound">Loggable</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Observation</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the robot observation. Must derive from <ref refid="classrobot__interfaces_1_1Loggable" kindref="compound">Loggable</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="include/robot_interfaces/robot_logger.hpp" line="57" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="56" bodyend="384"/>
    <listofallmembers>
      <member refid="classrobot__interfaces_1_1RobotLogger_1ac37dfe19cbd427ba3ecf1238e8a64bed" prot="private" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>append_field_data_to_file</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1ab27971e5fd581e7cd8b8e449f5892637" prot="private" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>append_names_to_header</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1aae435545ce6d6b273b190859fdd30719" prot="private" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>append_robot_data_to_file</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1a0465f86efac78a429f8980bd2a12959e" prot="private" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>block_size_</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1a9bcf9c2eaadd6e87b410daf65e0b3f07" prot="private" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>construct_header</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1ac47398855bcb94ca8a3e83334ee1d382" prot="private" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>index_</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1a7b3d0546de38f9ce6ba8ef8302126f59" prot="private" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>is_running_</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1ad1391bc38ff516f01b3c8bdd91e27efc" prot="private" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>logger_data_</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1ad21b7aa8531a57bb3740ac5282093815" prot="private" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>loop</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1aa03a18fb24545744533c39e193c5920a" prot="private" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>output_file_</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1a180a1ad565fd1a2342c6a40465fea731" prot="private" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>output_file_name_</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1aacc60628e6fd5ca26f15dfe51763697d" prot="public" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>RobotLogger</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1a7a1b50c75aab3255ac7e6d412de833d1" prot="public" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>start</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1a55ec7dcacd849adee53fa49a2a0c8234" prot="public" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>stop</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1afeed0904c937b1fd7f88512456e98b80" prot="private" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>stop_was_called_</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1a913d7af3357263aeb4b4296af92d417b" prot="private" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>thread_</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1ada7467fbac96a67ab798c4e6ef56c9b1" prot="public" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>write_current_buffer</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1a3ff864106933593e16e5f3d6b5a8c4c2" prot="private" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>write_header_to_file</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1aaa91bf14d3de20fed756c8aa5d60c5c3" prot="public" virt="virtual"><scope>robot_interfaces::RobotLogger</scope><name>~RobotLogger</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
